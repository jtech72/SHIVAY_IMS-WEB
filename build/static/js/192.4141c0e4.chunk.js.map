{"version":3,"file":"static/js/192.4141c0e4.chunk.js","mappings":"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","sources":["pages/shivay/user/modal/AddUserModal.js","pages/shivay/user/User.js","helpers/Pagination.js","helpers/PageTitle.js","helpers/loader/Loading.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Modal, Button, Row, Col, Form } from 'react-bootstrap';\nimport Select from 'react-select';\nimport { createUsersActions, getLocationActions, getWarehouseActions, updateUsersActions } from '../../../../redux/actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { FiEye, FiEyeOff } from 'react-icons/fi';\nimport { Controller } from \"react-hook-form\";\n\nconst AddUserModal = ({ showModal, handleClose, UserData }) => {\n\n    const { type } = UserData;\n    const dispatch = useDispatch();\n    const {\n        handleSubmit,\n        register,\n        control,\n        setValue,\n        reset,\n        formState: { errors },\n    } = useForm();\n\n    const [selectedWarehouse, setSelectedWarehouse] = useState([]);\n    const [locationSelected, setLocationSelected] = useState(null);\n    // console.log(selectedWarehouse, 'selectedWarehouseselectedWarehouse')\n    const { location } = useSelector((state) => state?.locationReducer || {});\n    const locationData = location?.response || [];\n    const WarehouseData = useSelector((state) => state?.getWarehouseReducer?.warehouseList?.response || []);\n\n    useEffect(() => {\n        dispatch(getLocationActions());\n        dispatch(getWarehouseActions({\n            limit: '',\n            page: '',\n            search: '',\n            stockFilter: true,\n        }));\n    }, [dispatch]);\n\n    const closeModal = () => {\n        reset();\n        handleClose();\n        setSelectedWarehouse(null);\n        setLocationSelected(null);\n    }\n\n    const [showPassword, setShowPassword] = useState(false);\n\n    const togglePasswordVisibility = () => {\n        setShowPassword(prev => !prev);\n    };\n\n    useEffect(() => {\n\n        if (UserData?.data) {\n            const updateWarehouses = UserData?.data?.warehouseData?.map((data) => (\n                {\n                    value: data?._id, label: data?.name\n                }\n            ))\n            setSelectedWarehouse(updateWarehouses)\n\n            setValue('name', UserData.data?.name)\n            setValue('email', UserData.data?.email)\n            setValue('password', UserData.data?.password)\n            setValue('phoneNumber', UserData.data?.phoneNumber)\n            setValue('address', UserData.data?.address)\n\n            setLocationSelected({\n                label: UserData?.data?.location,\n                value: UserData?.data?.location,\n            });\n        }\n    }, [UserData]);\n\n    const onSubmit = (data) => {\n        const payload = {\n            name: data?.name,\n            email: data?.email,\n            password: data?.password,\n            phoneNumber: String(data?.phoneNumber || ''),\n            address: data?.address || '',\n            location: locationSelected ? locationSelected.value : '',\n            warehouseIds: selectedWarehouse?.map((item) => item.value),\n        };\n        if (UserData?.data?._id) {\n            const updatedData = {\n                ...payload,\n                userId: UserData?.data?._id,\n            };\n            dispatch(updateUsersActions(updatedData));\n        } else {\n            dispatch(createUsersActions(payload));\n        }\n        // console.log(payload,'payload')\n        closeModal();\n    };\n\n    return (\n        <Modal show={showModal} centered size='lg' onHide={handleClose}>\n            <Form onSubmit={handleSubmit(onSubmit)}>\n                <Modal.Header closeButton>\n                    <Modal.Title className='text-black'>{type} User</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Row>\n                        <Col sm={6}>\n                            <Form.Group className=\"mb-1\">\n                                <Form.Label className=\"mb-0\">Warehouse {!UserData?.data && <span className=\"text-danger\">*</span>}\n                                </Form.Label>\n                                <Select\n                                    value={selectedWarehouse}\n                                    onChange={(selectedOption) => setSelectedWarehouse(selectedOption)}\n                                    options={WarehouseData?.map((data) => ({\n                                        label: data.name,\n                                        value: data._id,\n                                    }))}\n                                    placeholder=\"Select a warehouse\"\n                                    isClearable\n                                    isMulti\n                                    required\n                                />\n\n                                {errors.warehouse && (\n                                    <small className=\"text-danger\">{errors.warehouse.message}</small>\n                                )}\n                            </Form.Group>\n\n                        </Col>\n                        <Col sm={6}>\n                            <Form.Group className=\"mb-1\">\n                                <Form.Label className='mb-0'>User Name {!UserData?.data && <span className=\"text-danger\">*</span>}\n                                </Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    placeholder=\"Enter User Name\"\n                                    {...register(\"name\", {\n                                        required: \"User Name is required\",\n                                        validate: (value) => {\n                                            const trimmed = value.trim();\n                                            if (trimmed === \"\") return \"User Name cannot be empty or spaces only\";\n                                            if (/\\d/.test(trimmed)) return \"User Name should not contain numbers\";\n                                            return true;\n                                        }\n                                    })}\n                                />\n                                {errors.name && <small className=\"text-danger\">{errors.name.message}</small>}\n                            </Form.Group>\n\n                        </Col>\n                        <Col sm={6}>\n                            <Form.Group className=\"mb-1\">\n                                <Form.Label className='mb-0'>Email Id {!UserData?.data && <span className=\"text-danger\">*</span>}\n                                </Form.Label>\n                                <Form.Control\n                                    type=\"email\"\n                                    placeholder=\"Enter Email Id\"\n                                    {...register(\"email\", { required: true })}\n                                />\n                                {errors.email && <small className=\"text-danger\">Email is required</small>}\n                            </Form.Group>\n                        </Col>\n                        <Col sm={6}>\n                            <Form.Group className=\"mb-1 position-relative\">\n                                <Form.Label className='mb-0'>Password {!UserData?.data && <span className=\"text-danger\">*</span>}\n                                </Form.Label>\n                                <div className=\"position-relative\">\n                                    <Form.Control\n                                        type={showPassword ? \"text\" : \"password\"}\n                                        placeholder=\"Enter Password\"\n                                        {...register(\"password\", {\n                                            required: \"Password is required\",\n                                            minLength: {\n                                                value: 8,\n                                                message: \"Minimum 8 characters\"\n                                            },\n                                            pattern: {\n                                                value: /^(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n                                                message: \"Must include uppercase, number, and special character\"\n                                            }\n                                        })}\n                                    />\n                                    <span\n                                        onClick={togglePasswordVisibility}\n                                        className=\"position-absolute end-0 top-50 translate-middle-y me-2\"\n                                        style={{ cursor: 'pointer' }}\n                                    >\n                                        {showPassword ? <FiEyeOff /> : <FiEye />}\n                                    </span>\n                                </div>\n                                {errors.password && (\n                                    <small className=\"text-danger\">{errors.password.message}</small>\n                                )}\n                            </Form.Group>\n                        </Col>\n                        <Col sm={6}>\n                            <Form.Group className=\"mb-1\">\n                                <Form.Label className='mb-0'>Phone {!UserData?.data && <span className=\"text-danger\">*</span>}\n                                </Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    placeholder=\"Enter Phone\"\n                                    maxLength={10}\n                                    onInput={(e) => {\n                                        e.target.value = e.target.value.replace(/\\D/g, '').slice(0, 10);\n                                    }}\n                                    {...register(\"phoneNumber\", {\n                                        required: \"Phone number is required\",\n                                        pattern: {\n                                            value: /^[0-9]{10}$/,\n                                            message: \"Phone number must be exactly 10 digits\"\n                                        }\n                                    })} />\n                                {errors.phoneNumber && <small className=\"text-danger\">Phone is required</small>}\n                            </Form.Group>\n                        </Col>\n                        <Col sm={6}>\n                            <Form.Group className=\"mb-1\">\n                                <Form.Label className=\"mb-0\">Location</Form.Label>\n                                <Select\n                                    options={locationData?.map((loc) => ({\n                                        label: loc.name,\n                                        value: loc.name,\n                                    }))}\n                                    placeholder=\"Select Location\"\n                                    onChange={(selectedOption) => {\n                                        console.log(selectedOption, 'gfxdcghbjk')\n                                        setLocationSelected(selectedOption);\n                                        setValue('location', selectedOption?.value);\n                                    }}\n                                    value={locationSelected}\n                                    isSearchable\n                                />\n                            </Form.Group>\n                        </Col>\n\n                        <Col sm={12}>\n                            <Form.Group className=\"mb-1\">\n                                <Form.Label className='mb-0'>Full Address</Form.Label>\n                                <Form.Control\n                                    as=\"textarea\"\n                                    rows={3}\n                                    placeholder=\"Enter Full Address\"\n                                    {...register(\"address\")}\n                                />\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button className='cancel-button' onClick={closeModal}>\n                        Close\n                    </Button>\n                    <Button className='custom-button' type='submit'>\n                        {type === 'Add' ? 'Save' : 'Update'}\n                    </Button>\n                </Modal.Footer>\n            </Form>\n        </Modal>\n    );\n};\n\nexport default AddUserModal;\n","import React, { useEffect, useState } from 'react'\nimport { Button, Card, Col, Form, Modal, Row } from 'react-bootstrap'\nimport { IoIosAdd } from \"react-icons/io\";\nimport PageTitle from '../../../helpers/PageTitle';\nimport { AiOutlineEdit } from \"react-icons/ai\";\nimport AddUserModal from './modal/AddUserModal';\nimport { RiDeleteBinLine } from \"react-icons/ri\";\nimport { deleteUsersActions, getUsersListActions, UsersStateEmptyActions } from '../../../redux/actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FaRegCopy } from 'react-icons/fa';\nimport { MdDeleteOutline } from 'react-icons/md';\nimport Pagination from '../../../helpers/Pagination';\nimport { Loading } from '../../../helpers/loader/Loading';\n\nconst User = () => {\n\n    const dispatch = useDispatch();\n    const [showConfirm, setShowConfirm] = useState(false);\n    const [userToDelete, setUserToDelete] = useState(null);\n    const [search, setSearch] = useState('')\n    const totalRecords = '0';\n    const [pageIndex, setPageIndex] = useState(1);\n    const [pageSize, setPageSize] = useState(10);\n    const [totalPages, setTotalPages] = useState(Math.ceil(totalRecords / pageSize));\n    const store = useSelector((state) => state)\n\n    const UserData = store?.userListReducer?.userList?.response;\n    const createResponse = store?.createUsersReducer?.createUsers?.status;\n    const updateResponse = store?.updateUsersReducer?.updateUsers?.status;\n    const deleteResponse = store?.deleteUsersReducer?.deleteUsers?.status;\n\n    useEffect(() => {\n        dispatch(getUsersListActions({\n            limit: pageSize,\n            page: pageIndex,\n            search: search,\n            stockFilter: true,\n        }));\n    }, [dispatch, search, pageSize, pageIndex]);\n\n    useEffect(() => {\n        if (createResponse === 200 || deleteResponse === 200 || updateResponse === 200) {\n            dispatch(getUsersListActions({\n                limit: pageSize,\n                page: pageIndex,\n                search: search,\n                stockFilter: true,\n            }));\n        }\n    }, [createResponse, deleteResponse, updateResponse]);\n\n    const handleDelete = () => {\n        dispatch(deleteUsersActions({ userId: userToDelete }));\n        dispatch(UsersStateEmptyActions())\n        setShowConfirm(false);\n    };\n\n    const [showUserModal, setShowUserModal] = useState({\n        data: null,\n        type: null,\n        status: false\n    })\n\n    useEffect(() => {\n        setTotalPages(Math.ceil(totalRecords / pageSize));\n    },\n        [totalRecords, pageSize]);\n\n    const handleUserModal = (usersDetails, modalType, modalStatus) => {\n        setShowUserModal({ ...showUserModal, data: usersDetails, type: modalType, status: modalStatus })\n    }\n    const handleClose = () => {\n        setShowUserModal({ ...showUserModal, data: null, status: false })\n    }\n    return (\n        <div>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: \"SHIVAY User List\", path: \"/shivay/user\" },\n                    { label: \"User List\", path: \"/shivay/user\", active: true },\n                ]}\n                title={\"User List\"}\n            />\n            <Form>\n                <Row>\n                    <Col sm={12}>\n                        <div className='d-flex justify-content-end mt-1'>\n                            <input\n                                type=\"text\"\n                                className=\"form-control w-auto me-2\"\n                                style={{ height: '42px', marginTop: '10px' }}\n                                placeholder=\"Search...\"\n                                value={search}\n                                onChange={(e) => setSearch(e.target.value)}\n                            />\n                            <Button className=\"mt-2 fw-bold custom-button\" onClick={() => handleUserModal(null, 'Add', true)}>\n                                <IoIosAdd className=\"fs-3\" />&nbsp;User\n                            </Button>\n                        </div>\n                    </Col>\n\n                    <div className='mt-2'>\n                        <Card\n                            style={{ boxShadow: 'rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px, rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset' }}\n                        >\n                            <Card.Body className=\"text-center py-1\">\n                                <table className=\"table table-striped bg-white mb-0\">\n                                    <thead>\n                                        <tr className=\"table_header\">\n                                            <th scope=\"col\"><i className=\"mdi mdi-merge\"></i></th>\n                                            <th scope=\"col\">User Name</th>\n                                            <th scope=\"col\">Email Id</th>\n                                            <th scope=\"col\">Password</th>\n                                            {/* <th scope=\"col\">Action</th> */}\n                                        </tr>\n                                    </thead>\n                                    {store?.userListReducer?.loading ? (\n                                        <tr>\n                                            <td className='text-center' colSpan={6}>\n                                                <Loading />\n                                            </td>\n                                        </tr>\n                                    ) : (\n                                        <tbody>\n                                            {UserData?.length === 0 ? (\n                                                <tr>\n                                                    <td colSpan={6} className='text-center'>\n                                                        <p className='my-5 py-5 '>No User Found.</p>\n                                                    </td>\n                                                </tr>\n                                            ) : (\n                                                UserData?.map((data, index) => (\n                                                    <tr key={index} className=\"text-dark fw-bold text-nowrap highlight-row\">\n                                                        <th scope=\"row\">{index + 1}</th>\n                                                        <td className=\"text-uppercase fw-bold \">\n                                                            {data?.name || <span className=\"text-danger\">N/A</span>}\n                                                        </td>\n                                                        <td className=\"fw-bold text-primary\">\n                                                            {data?.email ? (\n                                                                <>\n                                                                    <span>{data.email}</span>\n                                                                    <FaRegCopy\n                                                                        style={{ cursor: 'pointer' }}\n                                                                        title=\"Copy Email\"\n                                                                        className='text-muted ms-2 fs-6'\n                                                                        onClick={() => {\n                                                                            navigator.clipboard.writeText(data.email);\n                                                                            alert('Email copied to clipboard!');\n                                                                        }}\n                                                                    />\n                                                                </>\n                                                            ) : (\n                                                                <span className=\"text-danger\">N/A</span>\n                                                            )}\n                                                        </td>\n                                                        <td className=\" fw-bold\">\n                                                            {data?.password || <span className=\"text-danger\">N/A</span>}\n                                                        </td>\n                                                        <td></td>\n                                                        <div className=\"icon-container d-flex pb-0\" >\n                                                            <span className=\"icon-wrapper\" title=\"Edit\">\n                                                                <AiOutlineEdit\n                                                                    className=\"fs-4 text-black\"\n                                                                    style={{ cursor: 'pointer' }}\n                                                                    onClick={() => handleUserModal(data, 'Edit', true)}\n                                                                />\n                                                            </span>\n                                                            <span className=\"icon-wrapper\" title=\"Delete\" onClick={() => { setUserToDelete(data?._id); setShowConfirm(true); }}>\n                                                                <RiDeleteBinLine className=\"fs-4 text-black\" style={{ cursor: 'pointer' }} />\n                                                            </span>\n                                                        </div>\n                                                    </tr>\n                                                )))}\n                                        </tbody>\n                                    )}\n                                </table>\n                                <Pagination\n                                    pageIndex={pageIndex}\n                                    pageSize={pageSize}\n                                    totalPages={store?.userListReducer?.userList?.totalPages}\n                                    setPageIndex={setPageIndex}\n                                    onChangePageSize={setPageSize}\n                                />\n                            </Card.Body>\n                        </Card>\n                    </div>\n                </Row>\n            </Form>\n\n            <AddUserModal showModal={showUserModal?.status} handleClose={handleClose} UserData={showUserModal} />\n\n            {/* delete modal */}\n            <Modal show={showConfirm} onHide={() => setShowConfirm(false)} >\n                <Modal.Body className='text-center'>\n                    <h4 className='text-black'>Confirm Deletion</h4>\n                    <p className='mt-2 mb-3'> Are you sure you want to delete this User?</p>\n                    <span className='bg-light rounded-circle p-3 '>\n                        <MdDeleteOutline className='fs-1  text-danger' />\n                    </span>\n                    <div className='d-flex justify-content-center mt-3 gap-2'>\n                        <Button className='cancel-button' onClick={() => setShowConfirm(false)}>\n                            Cancel\n                        </Button>\n                        <Button className='custom-button' onClick={handleDelete}>\n                            Delete\n                        </Button>\n                    </div>\n                </Modal.Body>\n            </Modal>\n        </div>\n    )\n}\n\nexport default User","import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom'; // Assuming you are using React Router\r\n\r\nconst Pagination = ({ pageIndex, pageSize, totalPages, setPageIndex, onChangePageSize }) => {\r\n    useEffect(() => {\r\n        // Ensure pageIndex stays within bounds when totalPages changes\r\n        if (pageIndex > totalPages) {\r\n            setPageIndex(Math.max(1, totalPages)); // Keep in valid range\r\n        }\r\n    }, [pageIndex, totalPages, setPageIndex]);\r\n\r\n    return (\r\n        <div className=\"d-lg-flex align-items-center text-center pb-1 pt-2\">\r\n            {/* Page Size Selection */}\r\n            <div className=\"d-inline-block me-3\">\r\n                <label className=\"me-1\">Display :</label>\r\n                <select\r\n                    value={pageSize}\r\n                    onChange={(e) => {\r\n                        const newSize = Number(e.target.value);\r\n                        onChangePageSize(newSize);\r\n                        setPageIndex(1); // Reset to first page\r\n                    }}\r\n                    className=\"form-select d-inline-block w-auto\">\r\n                    {[10, 20, 50, 100].map((size) => (\r\n                        <option key={size} value={size}>{size}</option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n\r\n            {/* Page Info */}\r\n            <span className=\"me-3\">\r\n                Page <strong>{pageIndex} of {totalPages}</strong>\r\n            </span>\r\n\r\n            {/* Go to Page Input */}\r\n            <label>Go to page: </label>\r\n            <input\r\n                type=\"number\"\r\n                placeholder={`${pageIndex}`}\r\n                min=\"1\"\r\n                max={totalPages}\r\n                onChange={(e) => {\r\n                    const enteredPage = Number(e.target.value);\r\n                    if (enteredPage >= 1 && enteredPage <= totalPages) {\r\n                        setPageIndex(enteredPage);\r\n                    }\r\n                }}\r\n                className=\"form-control ms-1 d-inline-block\"\r\n                style={{ width: '80px' }}\r\n            />\r\n\r\n            {/* Pagination Controls */}\r\n            <ul className=\"pagination pagination-rounded d-inline-flex ms-auto align-item-center mb-0 pe-4\">\r\n                {/* Previous Button */}\r\n                {pageIndex > 1 && (\r\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex - 1)}>\r\n                        <Link to=\"#\" className=\"page-link\">Previous</Link>\r\n                    </li>\r\n                )}\r\n\r\n                {/* Page Number Buttons */}\r\n                {Array.from({ length: totalPages }).map((_, i) => {\r\n                    const page = i + 1; // Adjust index to start from 1\r\n                    const isCurrentPage = page === pageIndex;\r\n                    const isNearCurrent = page >= pageIndex - 1 && page <= pageIndex + 1;\r\n                    const isEdgePage = page === 1 || page === totalPages;\r\n\r\n                    if (totalPages <= 5 || isNearCurrent || isEdgePage) {\r\n                        return (\r\n                            <li key={page} className={`page-item ${isCurrentPage ? 'active' : ''}`}\r\n                                onClick={() => setPageIndex(page)}>\r\n                                <Link to=\"#\" className=\"page-link\">{page}</Link>\r\n                            </li>\r\n                        );\r\n                    } else if ((page === 2 && pageIndex >= 5) || (page === totalPages - 1 && pageIndex <= totalPages - 4)) {\r\n                        return <li key={page} className=\"page-ittotalPagesem disabled\"><Link to=\"#\" className=\"page-link px-0\">...</Link></li>;\r\n                    }\r\n\r\n                    return null;\r\n                })}\r\n\r\n                {/* Next Button */}\r\n                {pageIndex < totalPages && (\r\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex + 1)}>\r\n                        <Link to=\"#\" className=\"page-link\">Next</Link>\r\n                    </li>\r\n                )}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Pagination;\r\n","// @flow\r\nimport React from 'react';\r\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\r\n\r\ntype BreadcrumbItems = {\r\n    label: string,\r\n    path: string,\r\n    active?: boolean,\r\n};\r\n\r\ntype PageTitleProps = {\r\n    breadCrumbItems: Array<BreadcrumbItems>,\r\n    title: string,\r\n};\r\n\r\n/**\r\n * PageTitle\r\n */\r\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <div className=\"page-title-box\">\r\n                    <div className=\"page-title-right\">\r\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\r\n                            <Breadcrumb.Item href=\"/\" >Dashboard</Breadcrumb.Item>\r\n\r\n                            {props.breadCrumbItems.map((item, index) => {\r\n                                return item.active ? (\r\n                                    <Breadcrumb.Item active key={index} style={{ color: '#000' }}>\r\n                                        {item.label}\r\n                                    </Breadcrumb.Item>\r\n                                ) : (\r\n                                    <Breadcrumb.Item key={index} href={item.path} >\r\n                                        {item.label}\r\n                                    </Breadcrumb.Item>\r\n                                );\r\n                            })}\r\n                        </Breadcrumb>\r\n                    </div>\r\n                    <h4 className=\"page-title\" style={{ color: '#000' }}>{props.title}</h4>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default PageTitle;\r\n","import React from 'react';\r\nimport { ColorRing, ThreeDots } from 'react-loader-spinner';\r\nconst Loading = () => {\r\n    return (\r\n        <div style={{ height: '54vh', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n            <ThreeDots\r\n                color=\"#6655D9\"\r\n                strokeWidth=\"5\"\r\n                animationDuration=\"0.75\"\r\n                width=\"70\"\r\n                visible={true}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst DashboardLoading = () => {\r\n    return (\r\n        <div style={{ height: '30vh', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n            <ThreeDots\r\n                color=\"#6655D9\"\r\n                strokeWidth=\"5\"\r\n                animationDuration=\"0.75\"\r\n                width=\"70\"\r\n                visible={true}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst ButtonLoading = () => {\r\n    return (\r\n        // <div style={{ height: \"5vh\", display: 'flex', justifyContent: 'center', alignItems: 'center' }} >\r\n        <div className=\" d-flex justify-content-center align-items-center w-100\" style={{ height: '2vh' }}>\r\n            <ColorRing\r\n                visible={true}\r\n                height=\"25\"\r\n                width=\"25\"\r\n                ariaLabel=\"blocks-loading\"\r\n                wrapperStyle={{}}\r\n                wrapperClass=\"blocks-wrapper\"\r\n                colors={['#fff', '#fff', '#fff', '#fff', '#fff']}\r\n            />\r\n\r\n            {/* <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"visually-hidden\">Loading...</span>\r\n            </div> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst CartLoading = () => {\r\n    return (\r\n        // <div style={{ height: \"5vh\", display: 'flex', justifyContent: 'center', alignItems: 'center' }} >\r\n        <div className=\"p-0 d-flex justify-content-center align-items-center m-0\">\r\n            <ColorRing\r\n                visible={true}\r\n                height=\"32\"\r\n                width=\"32\"\r\n                ariaLabel=\"blocks-loading\"\r\n                wrapperStyle={{}}\r\n                wrapperClass=\"blocks-wrapper\"\r\n                colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\r\n            />\r\n\r\n            {/* <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"visually-hidden\">Loading...</span>\r\n            </div> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { Loading, ButtonLoading, CartLoading, DashboardLoading };\r\n"],"names":["_ref","showModal","handleClose","UserData","type","dispatch","useDispatch","handleSubmit","register","control","setValue","reset","formState","errors","useForm","selectedWarehouse","setSelectedWarehouse","useState","locationSelected","setLocationSelected","location","useSelector","state","locationReducer","locationData","response","WarehouseData","_state$getWarehouseRe","_state$getWarehouseRe2","getWarehouseReducer","warehouseList","useEffect","getLocationActions","getWarehouseActions","limit","page","search","stockFilter","closeModal","showPassword","setShowPassword","data","_UserData$data","_UserData$data$wareho","_UserData$data2","_UserData$data3","_UserData$data4","_UserData$data5","_UserData$data6","_UserData$data7","_UserData$data8","updateWarehouses","warehouseData","map","value","_id","label","name","email","password","phoneNumber","address","_jsx","Modal","show","centered","size","onHide","children","_jsxs","Form","onSubmit","_UserData$data9","payload","String","warehouseIds","item","_UserData$data10","updatedData","userId","updateUsersActions","createUsersActions","Header","closeButton","Title","className","Body","Row","Col","sm","Group","Label","Select","onChange","selectedOption","options","placeholder","isClearable","isMulti","required","warehouse","message","Control","validate","trimmed","trim","test","minLength","pattern","onClick","togglePasswordVisibility","prev","style","cursor","FiEyeOff","FiEye","maxLength","onInput","e","target","replace","slice","loc","console","log","isSearchable","as","rows","Footer","Button","User","_store$userListReduce","_store$userListReduce2","_store$createUsersRed","_store$createUsersRed2","_store$updateUsersRed","_store$updateUsersRed2","_store$deleteUsersRed","_store$deleteUsersRed2","_store$userListReduce3","_store$userListReduce4","_store$userListReduce5","showConfirm","setShowConfirm","userToDelete","setUserToDelete","setSearch","pageIndex","setPageIndex","pageSize","setPageSize","totalPages","setTotalPages","Math","ceil","store","userListReducer","userList","createResponse","createUsersReducer","createUsers","status","updateResponse","updateUsersReducer","updateUsers","deleteResponse","deleteUsersReducer","deleteUsers","getUsersListActions","showUserModal","setShowUserModal","handleUserModal","usersDetails","modalType","modalStatus","PageTitle","breadCrumbItems","path","active","title","height","marginTop","IoIosAdd","Card","boxShadow","scope","loading","colSpan","Loading","length","index","_Fragment","FaRegCopy","navigator","clipboard","writeText","alert","AiOutlineEdit","RiDeleteBinLine","Pagination","onChangePageSize","AddUserModal","MdDeleteOutline","handleDelete","deleteUsersActions","UsersStateEmptyActions","max","newSize","Number","min","enteredPage","width","Link","to","Array","from","_","i","isCurrentPage","props","Breadcrumb","listProps","Item","href","color","display","justifyContent","alignItems","ThreeDots","strokeWidth","animationDuration","visible","DashboardLoading","ButtonLoading","ColorRing","ariaLabel","wrapperStyle","wrapperClass","colors"],"sourceRoot":""}