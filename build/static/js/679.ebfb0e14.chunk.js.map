{"version":3,"file":"static/js/679.ebfb0e14.chunk.js","mappings":"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","sources":["components/VerticalForm.js","components/FormInput.js","pages/account/AccountLayout.js","pages/account/Register.js"],"sourcesContent":["// @flow\r\nimport React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\n\r\ntype VerticalFromProps = {\r\n    defaultValues?: Object,\r\n    resolver?: any,\r\n    children?: any,\r\n    onSubmit?: (value: any) => void,\r\n    formClass?: string,\r\n};\r\n\r\nconst VerticalForm = ({\r\n    defaultValues,\r\n    resolver,\r\n    children,\r\n    onSubmit,\r\n    formClass,\r\n}: VerticalFromProps): React$Element<any> => {\r\n    /*\r\n     * form methods\r\n     */\r\n    const methods = useForm({ defaultValues, resolver });\r\n    const {\r\n        handleSubmit,\r\n        register,\r\n        control,\r\n        formState: { errors },\r\n    } = methods;\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\r\n            {Array.isArray(children)\r\n                ? children.map((child) => {\r\n                      return child.props && child.props.name\r\n                          ? React.createElement(child.type, {\r\n                                ...{\r\n                                    ...child.props,\r\n                                    register,\r\n                                    key: child.props.name,\r\n                                    errors,\r\n                                    control,\r\n                                },\r\n                            })\r\n                          : child;\r\n                  })\r\n                : children}\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default VerticalForm;\r\n","// @flow\r\nimport React, { useState } from 'react';\r\nimport { Form, InputGroup } from 'react-bootstrap';\r\nimport classNames from 'classnames';\r\n\r\n/* Password Input */\r\nconst PasswordInput = ({ name, placeholder, refCallback, errors, register, className }) => {\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    return (\r\n        <>\r\n            <InputGroup className=\"mb-0\">\r\n                <Form.Control\r\n                    type={showPassword ? 'text' : 'password'}\r\n                    placeholder={placeholder}\r\n                    name={name}\r\n                    id={name}\r\n                    as=\"input\"\r\n                    ref={(r) => {\r\n                        if (refCallback) refCallback(r);\r\n                    }}\r\n                    className={className}\r\n                    isInvalid={errors && errors[name] ? true : false}\r\n                    {...(register ? register(name) : {})}\r\n                    autoComplete={name}\r\n                />\r\n                <div\r\n                    className={classNames('input-group-text', 'input-group-password', {\r\n                        'show-password': showPassword,\r\n                    })}\r\n                    data-password={showPassword ? 'true' : 'false'}>\r\n                    <span\r\n                        className=\"password-eye\"\r\n                        onClick={() => {\r\n                            setShowPassword(!showPassword);\r\n                        }}></span>\r\n                </div>\r\n            </InputGroup>\r\n        </>\r\n    );\r\n};\r\n\r\ntype FormInputProps = {\r\n    label?: string,\r\n    type?: string,\r\n    name?: string,\r\n    placeholder?: string,\r\n    register?: any,\r\n    errors?: any,\r\n    className?: string,\r\n    labelClassName?: string,\r\n    containerClass?: string,\r\n    refCallback?: any,\r\n    children?: any,\r\n};\r\n\r\nconst FormInput = ({\r\n    label,\r\n    type,\r\n    name,\r\n    placeholder,\r\n    register,\r\n    errors,\r\n    className,\r\n    labelClassName,\r\n    containerClass,\r\n    refCallback,\r\n    children,\r\n    ...otherProps\r\n}: FormInputProps): React$Element<React$FragmentType> => {\r\n    // handle input type\r\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\r\n\r\n    return (\r\n        <>\r\n            {type === 'hidden' ? (\r\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\r\n            ) : (\r\n                <>\r\n                    {type === 'password' ? (\r\n                        <>\r\n                            <Form.Group className={containerClass}>\r\n                                {label ? (\r\n                                    <>\r\n                                        {' '}\r\n                                        <Form.Label className={labelClassName}>{label}</Form.Label> {children}{' '}\r\n                                    </>\r\n                                ) : null}\r\n                                <PasswordInput\r\n                                    name={name}\r\n                                    placeholder={placeholder}\r\n                                    refCallback={refCallback}\r\n                                    errors={errors}\r\n                                    register={register}\r\n                                    className={className}\r\n                                />\r\n\r\n                                {errors && errors[name] ? (\r\n                                    <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\r\n                                        {errors[name]['message']}\r\n                                    </Form.Control.Feedback>\r\n                                ) : null}\r\n                            </Form.Group>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            {type === 'select' ? (\r\n                                <>\r\n                                    <Form.Group className={containerClass}>\r\n                                        {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\r\n\r\n                                        <Form.Select\r\n                                            type={type}\r\n                                            label={label}\r\n                                            name={name}\r\n                                            id={name}\r\n                                            ref={(r) => {\r\n                                                if (refCallback) refCallback(r);\r\n                                            }}\r\n                                            comp={comp}\r\n                                            className={className}\r\n                                            isInvalid={errors && errors[name] ? true : false}\r\n                                            {...(register ? register(name) : {})}\r\n                                            {...otherProps}>\r\n                                            {children}\r\n                                        </Form.Select>\r\n\r\n                                        {errors && errors[name] ? (\r\n                                            <Form.Control.Feedback type=\"invalid\">\r\n                                                {errors[name]['message']}\r\n                                            </Form.Control.Feedback>\r\n                                        ) : null}\r\n                                    </Form.Group>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    {type === 'checkbox' || type === 'radio' ? (\r\n                                        <>\r\n                                            <Form.Group className={containerClass}>\r\n                                                <Form.Check\r\n                                                    type={type}\r\n                                                    label={label}\r\n                                                    name={name}\r\n                                                    id={name}\r\n                                                    ref={(r) => {\r\n                                                        if (refCallback) refCallback(r);\r\n                                                    }}\r\n                                                    className={className}\r\n                                                    isInvalid={errors && errors[name] ? true : false}\r\n                                                    {...(register ? register(name) : {})}\r\n                                                    {...otherProps}\r\n                                                />\r\n\r\n                                                {errors && errors[name] ? (\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        {errors[name]['message']}\r\n                                                    </Form.Control.Feedback>\r\n                                                ) : null}\r\n                                            </Form.Group>\r\n                                        </>\r\n                                    ) : (\r\n                                        <Form.Group className={containerClass}>\r\n                                            {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\r\n\r\n                                            <Form.Control\r\n                                                type={type}\r\n                                                placeholder={placeholder}\r\n                                                name={name}\r\n                                                id={name}\r\n                                                as={comp}\r\n                                                ref={(r) => {\r\n                                                    if (refCallback) refCallback(r);\r\n                                                }}\r\n                                                className={className}\r\n                                                isInvalid={errors && errors[name] ? true : false}\r\n                                                {...(register ? register(name) : {})}\r\n                                                {...otherProps}\r\n                                                autoComplete={name}>\r\n                                                {children ? children : null}\r\n                                            </Form.Control>\r\n\r\n                                            {errors && errors[name] ? (\r\n                                                <Form.Control.Feedback type=\"invalid\">\r\n                                                    {errors[name]['message']}\r\n                                                </Form.Control.Feedback>\r\n                                            ) : null}\r\n                                        </Form.Group>\r\n                                    )}\r\n                                </>\r\n                            )}\r\n                        </>\r\n                    )}\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FormInput;\r\n","// @flow\r\nimport React, { useEffect } from 'react';\r\nimport { Container, Row, Col, Card } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n// images\r\nimport { Logo, Shivay_Logo } from '../../helpers/image';\r\n\r\ntype AccountLayoutProps = {\r\n    bottomLinks?: React$Element<any>,\r\n    children?: any,\r\n};\r\n\r\nconst AccountLayout = ({ bottomLinks, children }: AccountLayoutProps): React$Element<any> => {\r\n    const { t } = useTranslation();\r\n    const currentYear = new Date().getFullYear();\r\n\r\n    useEffect(() => {\r\n        if (document.body) document.body.classList.add('authentication-bg');\r\n\r\n        return () => {\r\n            if (document.body) document.body.classList.remove('authentication-bg');\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"account-pages pt-2 pt-sm-5 pb-4 pb-sm-5\">\r\n                <Container>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Col md={8} lg={6} xl={5} xxl={4}>\r\n                            <Card>\r\n                                {/* logo */}\r\n                                <Card.Header className=\" text-center bg-primary\" >\r\n                                    <Link to=\"/\">\r\n                                        <span>\r\n                                            <img src={Shivay_Logo} alt=\"\" height=\"70\" className='bg-primary rounded-pill px-3' />\r\n                                        </span>\r\n                                    </Link>\r\n                                </Card.Header>\r\n                                <Card.Body className=\"p-4\">{children}</Card.Body>\r\n                            </Card>\r\n\r\n                            {/* bottom links */}\r\n                            {bottomLinks}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n            <footer className=\"footer footer-alt\">{currentYear} © SHIVAY - <a href=\"https://rowthtech.com/\" className='text-muted'><u>rowthtech.com</u></a></footer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AccountLayout;\r\n","// @flow\r\nimport React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Navigate, Link } from 'react-router-dom';\r\nimport { Button, Alert, Row, Col } from 'react-bootstrap';\r\nimport { useTranslation } from 'react-i18next';\r\nimport * as yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n\r\n//actions\r\nimport { resetAuth, signupUser } from '../../redux/actions';\r\n\r\n// components\r\nimport { VerticalForm, FormInput } from '../../components/';\r\n\r\nimport AccountLayout from './AccountLayout';\r\n\r\n/* bottom link */\r\nconst BottomLink = () => {\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <Row className=\"mt-3\">\r\n            <Col className=\"text-center\">\r\n                <p className=\"text-muted\">\r\n                    {t('Already have account?')}{' '}\r\n                    <Link to={'/account/login'} className=\"text-muted ms-1\">\r\n                        <b>{t('Log In')}</b>\r\n                    </Link>\r\n                </p>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nconst Register = (): React$Element<React$FragmentType> => {\r\n    const { t } = useTranslation();\r\n    const dispatch = useDispatch();\r\n\r\n    const { loading, userSignUp, error } = useSelector((state) => ({\r\n        loading: state.Auth.loading,\r\n        error: state.Auth.error,\r\n        userSignUp: state.Auth.userSignUp,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        dispatch(resetAuth());\r\n    }, [dispatch]);\r\n\r\n    /*\r\n     * form validation schema\r\n     */\r\n    const schemaResolver = yupResolver(\r\n        yup.object().shape({\r\n            fullname: yup.string().required(t('Please enter Fullname')),\r\n            email: yup.string().required('Please enter Email').email('Please enter valid Email'),\r\n            password: yup.string().required(t('Please enter Password')),\r\n        })\r\n    );\r\n\r\n    /*\r\n     * handle form submission\r\n     */\r\n    const onSubmit = (formData) => {\r\n        dispatch(signupUser(formData['fullname'], formData['email'], formData['password']));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {userSignUp ? <Navigate to={'/account/confirm'} /> : null}\r\n\r\n            <AccountLayout bottomLinks={<BottomLink />}>\r\n                <div className=\"text-center w-75 m-auto\">\r\n                    <h4 className=\"text-dark-50 text-center mt-0 fw-bold\">{t('Free Sign Up')}</h4>\r\n                    <p className=\"text-muted mb-4\">\r\n                        {t(\"Don't have an account? Create your account, it takes less than a minute.\")}\r\n                    </p>\r\n                </div>\r\n\r\n                {error && (\r\n                    <Alert variant=\"danger\" className=\"my-2\">\r\n                        {error}\r\n                    </Alert>\r\n                )}\r\n\r\n                <VerticalForm onSubmit={onSubmit} resolver={schemaResolver} defaultValues={{}}>\r\n                    <FormInput\r\n                        label={t('Full Name')}\r\n                        type=\"text\"\r\n                        name=\"fullname\"\r\n                        placeholder={t('Enter your name')}\r\n                        containerClass={'mb-3'}\r\n                    />\r\n                    <FormInput\r\n                        label={t('Email address')}\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        placeholder={t('Enter your email')}\r\n                        containerClass={'mb-3'}\r\n                    />\r\n                    <FormInput\r\n                        label={t('Password')}\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        placeholder={t('Enter your password')}\r\n                        containerClass={'mb-3'}\r\n                    />\r\n                    <FormInput\r\n                        label={t('I accept Terms and Conditions')}\r\n                        type=\"checkbox\"\r\n                        name=\"checkboxsignup\"\r\n                        containerClass={'mb-3 text-muted'}\r\n                    />\r\n\r\n                    <div className=\"mb-3 mb-0 text-center\">\r\n                        <Button variant=\"success\" type=\"submit\" disabled={loading}>\r\n                            {t('Sign Up')}\r\n                        </Button>\r\n                    </div>\r\n                </VerticalForm>\r\n            </AccountLayout>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n"],"names":["_ref","defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","formState","errors","_jsx","className","noValidate","Array","isArray","map","child","props","name","React","type","key","PasswordInput","placeholder","refCallback","showPassword","setShowPassword","useState","_Fragment","_jsxs","InputGroup","Form","Control","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","_ref2","label","labelClassName","containerClass","otherProps","comp","Group","Label","Feedback","Select","Check","bottomLinks","t","useTranslation","currentYear","Date","getFullYear","useEffect","document","body","classList","add","remove","Container","Row","Col","md","lg","xl","xxl","Card","Header","Link","to","src","Shivay_Logo","alt","height","Body","href","BottomLink","Register","dispatch","useDispatch","loading","userSignUp","error","useSelector","state","Auth","resetAuth","schemaResolver","yupResolver","yup","shape","fullname","required","email","password","Navigate","AccountLayout","Alert","variant","VerticalForm","formData","signupUser","FormInput","Button","disabled"],"sourceRoot":""}