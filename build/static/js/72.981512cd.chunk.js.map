{"version":3,"file":"static/js/72.981512cd.chunk.js","mappings":"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","sources":["helpers/PageTitle.js","pages/shivay/openingStock/addStock/AddOpeningStock.js","helpers/loader/Loading.js","pages/shivay/openingStock/addStock/AddProductModal.js"],"sourcesContent":["// @flow\r\nimport React from 'react';\r\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\r\n\r\ntype BreadcrumbItems = {\r\n    label: string,\r\n    path: string,\r\n    active?: boolean,\r\n};\r\n\r\ntype PageTitleProps = {\r\n    breadCrumbItems: Array<BreadcrumbItems>,\r\n    title: string,\r\n};\r\n\r\n/**\r\n * PageTitle\r\n */\r\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <div className=\"page-title-box\">\r\n                    <div className=\"page-title-right\">\r\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\r\n                            <Breadcrumb.Item href=\"/\" >Dashboard</Breadcrumb.Item>\r\n\r\n                            {props.breadCrumbItems.map((item, index) => {\r\n                                return item.active ? (\r\n                                    <Breadcrumb.Item active key={index} style={{ color: '#000' }}>\r\n                                        {item.label}\r\n                                    </Breadcrumb.Item>\r\n                                ) : (\r\n                                    <Breadcrumb.Item key={index} href={item.path} >\r\n                                        {item.label}\r\n                                    </Breadcrumb.Item>\r\n                                );\r\n                            })}\r\n                        </Breadcrumb>\r\n                    </div>\r\n                    <h4 className=\"page-title\" style={{ color: '#000' }}>{props.title}</h4>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default PageTitle;\r\n","import React, { useEffect, useRef, useState } from 'react'\nimport PageTitle from '../../../../helpers/PageTitle'\nimport { Button, Card, Col, Form, Row } from 'react-bootstrap'\nimport Select from 'react-select';\nimport { IoIosAdd } from 'react-icons/io';\nimport { AiOutlineEdit } from 'react-icons/ai';\nimport { RiDeleteBinLine } from 'react-icons/ri';\nimport AddProductModal from './AddProductModal';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createStockActions, getStockListActions, getWarehouseListActions, updateStockActions } from '../../../../redux/actions';\nimport { useForm } from 'react-hook-form';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { ButtonLoading } from '../../../../helpers/loader/Loading';\n\nconst AddOpeningStock = () => {\n\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const { handleSubmit, register, setValue } = useForm()\n    const [showModal, setShowModal] = useState(false);\n    const handleShow = () => setShowModal(true);\n    const handleClose = () => setShowModal(false);\n    const store = useSelector((state) => state)\n    const [today, setToday] = useState(new Date().toISOString().split('T')[0]);\n    const [searchParams] = useSearchParams();\n    const stockId = searchParams.get('Id');\n    const isEditMode = Boolean(stockId);\n    const StockInData = store?.stockListReducer?.stockList?.response;\n    console.log(StockInData, '1232232')\n    const Warehouse = store?.getWarehouseListReducer?.searchWarehouse?.response;\n    const warehouseOptions = Warehouse?.map((warehouse) => ({\n        value: warehouse._id,\n        label: warehouse.name,\n    }));\n\n    const [openingProducts, setOpeningProducts] = useState([])\n    const [selectedStock, setSelectedStock] = useState(null);\n    console.log(openingProducts, 'openingProducts')\n    const [selectedWarehouse, setSelectedWarehouse] = useState(null);\n    const [isEditing, setIsEditing] = useState(false);\n    const [editedQuantity, setEditedQuantity] = useState(selectedStock?.quantity || '');\n    const inputRef = useRef(null);\n\n    const createResponse = store?.createStockReducer?.createStock?.status;\n    // console.log(store?.createStockReducer, 'createResponse')\n\n    useEffect(() => {\n        if (createResponse === 200) {\n            navigate(\"/shivay/openingStock\");\n        }\n    }, [createResponse]);\n\n    const handleWarehouseChange = (selectedOption) => {\n        setSelectedWarehouse(selectedOption);\n    };\n\n    useEffect(() => {\n        dispatch(getWarehouseListActions());\n    }, [dispatch]);\n\n    useEffect(() => {\n\n        dispatch(getStockListActions({\n            limit: '',\n            page: '',\n            search: '',\n        }));\n    }, [dispatch]);\n\n    useEffect(() => {\n        if (stockId && StockInData?.length > 0) {\n            const foundStock = StockInData?.find(item => item._id === stockId);\n            setSelectedStock(foundStock);\n        }\n    }, [stockId, StockInData]);\n\n    console.log(StockInData, 'StockInData')\n\n    const onSubmit = (data) => {\n        const cleanedProducts = openingProducts.map(({ product, ...rest }) => rest);\n\n        const payload = {\n            warehouseId: selectedWarehouse?.value,\n            ...(!stockId && { productStock: cleanedProducts }),\n            description: data?.description,\n            date: data?.date\n        };\n        if (stockId) {\n            dispatch(updateStockActions({ ...payload, _id: stockId, quantity: editedQuantity }));\n        } else {\n            dispatch(createStockActions(payload));\n        }\n    };\n\n    const handleDeleteProduct = (indexToRemove) => {\n        const updatedProducts = openingProducts.filter((_, index) => index !== indexToRemove);\n        setOpeningProducts(updatedProducts);\n    };\n\n    useEffect(() => {\n\n        if (selectedStock) {\n            setEditedQuantity(selectedStock?.quantity || '');\n            const updateWarehouses = selectedStock?.warehouseData\n                ? [{ value: selectedStock.warehouseData._id, label: selectedStock.warehouseData.name }]\n                : [];\n\n            setSelectedWarehouse(updateWarehouses)\n            setToday(selectedStock?.date ? new Date(selectedStock?.date).toISOString().split('T')[0] : '')\n            console.log(selectedStock?.date, 'selectedStock?.date')\n\n\n            setValue('description', selectedStock?.description)\n        }\n    }, [selectedStock]);\n    console.log(selectedStock, 'selectedStock')\n\n    const handleEditClick = () => {\n        setIsEditing(true);\n    };\n\n    // Handle input change\n    const handleQuantityChange = (e) => {\n        setEditedQuantity(e.target.value);\n    };\n\n    // Handle save (when clicking outside or pressing Enter)\n    const handleSave = () => {\n        setIsEditing(false);\n        // Here you would typically also call an API to update the quantity in your backend\n    };\n\n    // Handle key press (for Enter key)\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            handleSave();\n        }\n    };\n\n    // Close the input when clicking outside\n    useEffect(() => {\n        const handleClickOutside = (e) => {\n            if (inputRef.current && !inputRef.current.contains(e.target)) {\n                handleSave();\n            }\n        };\n\n        if (isEditing) {\n            document.addEventListener('mousedown', handleClickOutside);\n            return () => {\n                document.removeEventListener('mousedown', handleClickOutside);\n            };\n        }\n    }, [isEditing]);\n\n    return (\n        <div>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: \"SHIVAY Opening Stock List\", path: \"/shivay/openingStock\" },\n                    { label: isEditMode ? \"Edit Opening Stock\" : \"Add Opening Stock\", path: \"/shivay/openingStock\", active: true },\n                ]}\n                title={isEditMode ? \"Edit Opening Stock\" : \"Add Opening Stock\"}\n            />\n\n\n            <Form onSubmit={handleSubmit(onSubmit)}>\n                <Row>\n                    <Col sm={3}>\n                        <Form.Group className=\"mb-1\">\n                            <Form.Label className='mb-0'>Warehouse <span className='text-danger'>*</span></Form.Label>\n                            <Select\n                                value={selectedWarehouse}\n                                onChange={handleWarehouseChange}\n                                options={warehouseOptions}\n                                placeholder=\"Select a warehouse\"\n                                noOptionsMessage={() => \"No warehouse found...\"}\n                                required\n                            />\n                        </Form.Group>\n                    </Col>\n                    <Col sm={3}>\n                        <Form.Group className=\"mb-1\">\n                            <Form.Label className='mb-0'>Date Range <span className='text-danger'>*</span></Form.Label>\n                            <Form.Control\n                                type=\"date\"\n                                value={today}\n                                {...register('date', { required: true })}\n                                onChange={(e) => setToday(e.target.value)}\n                                required\n                            />\n                        </Form.Group>\n                    </Col>\n\n                    <Col sm={3}>\n                        <Form.Group className=\"mb-1\">\n                            <Form.Label className='mb-0'>Description</Form.Label>\n                            <Form.Control\n                                as='textarea'\n                                rows={1}\n                                {...register('description')}\n                                placeholder='Enter Description'\n                            />\n                        </Form.Group>\n                    </Col>\n                    <Col sm={3} className='text-end mt-1'>\n                        {!isEditMode && <Button className=\"mt-2 fw-bold custom-button\"\n                            onClick={handleShow}\n                        >\n                            <IoIosAdd className=\"fs-3\" />&nbsp;Product\n                        </Button>}\n                    </Col>\n                </Row>\n\n                <div className='mt-2'>\n                    <Card\n                        style={{ boxShadow: 'rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px, rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset' }}\n                    >\n                        <Card.Body className=\"text-center py-1\">\n                            <table className=\"table table-striped bg-white\">\n                                <thead>\n                                    <tr className=\"table_header\">\n                                        <th scope=\"col\"><i className=\"mdi mdi-merge\"></i></th>\n                                        <th scope=\"col\">Product Name</th>\n                                        <th scope=\"col\">Code</th>\n                                        <th scope=\"col\">Quantity</th>\n\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {stockId ?\n                                        <>{[selectedStock] && [selectedStock]?.length > 0 ? (\n                                            [selectedStock]?.map((data, index) => (\n                                                <tr key={index} className=\"text-dark fw-bold text-nowrap highlight-row\">\n                                                    <th scope=\"row\">{index + 1}</th>\n                                                    <td className=\"text-uppercase fw-bold\">\n                                                        {data?.productData?.name || <span className=\"text-black\">-</span>}\n                                                    </td>\n                                                    <td className=\"fw-bold\">\n                                                        {data?.productData?.code || <span className=\"text-black\">-</span>}\n                                                    </td>\n                                                    <td className=\"fw-bold px-0 pb-0\">\n                                                        {isEditing ? (\n                                                            <input\n                                                                ref={inputRef}\n                                                                type=\"number\"  // or \"text\" depending on your needs\n                                                                value={editedQuantity}\n                                                                onChange={handleQuantityChange}\n                                                                onKeyPress={handleKeyPress}\n                                                                // autoFocus\n                                                                className=\"form-control form-control-md\"\n                                                                style={{ width: '5vw', display: 'inline-block', marginTop: '-10px' }}\n                                                            />\n                                                        ) : (\n                                                            <span onClick={handleEditClick} >{editedQuantity}</span> || <span className=\"text-black\">-</span>\n                                                        )}\n                                                    </td>\n\n                                                    <div className=\"icon-container d-flex pb-0\">\n                                                        <span\n                                                            className=\"icon-wrapper me-4\"\n                                                            title=\"Edit\"\n                                                            onClick={handleEditClick}\n                                                        >\n                                                            <AiOutlineEdit className=\"fs-4 text-black\" style={{ cursor: 'pointer' }} />\n                                                        </span>\n                                                    </div>\n                                                </tr>\n                                            ))\n                                        ) : (\n                                            <tr>\n                                                <td colSpan=\"6\" className=\"text-center text-muted py-3\">\n                                                    No products added yet. Please add products to add opening stock.\n                                                </td>\n                                            </tr>\n                                        )}</>\n                                        : <>\n                                            {openingProducts && openingProducts.length > 0 ? (\n                                                openingProducts?.map((data, index) => (\n                                                    <tr key={index} className=\"text-dark fw-bold text-nowrap highlight-row\">\n                                                        <th scope=\"row\">{index + 1}</th>\n                                                        <td className=\"text-uppercase fw-bold\">\n                                                            {data?.product?.name || <span className=\"text-black\">-</span>}\n                                                        </td>\n                                                        <td className=\"fw-bold\">\n                                                            {data?.product?.code || <span className=\"text-black\">-</span>}\n                                                        </td>\n                                                        <td className=\"fw-bold\">\n                                                            {data?.quantity || <span className=\"text-black\">-</span>}\n                                                        </td>\n\n                                                        <div className=\"icon-container d-flex pb-0\">\n                                                            {/* <span className=\"icon-wrapper\" title=\"Edit\">\n                                                                <AiOutlineEdit className=\"fs-4 text-black\" style={{ cursor: 'pointer' }} />\n                                                            </span> */}\n                                                            <span className=\"icon-wrapper me-4\" title=\"Delete\" onClick={() => handleDeleteProduct(index)}>\n                                                                <RiDeleteBinLine className=\"fs-4 text-black\" style={{ cursor: 'pointer' }} />\n                                                            </span>\n                                                        </div>\n                                                    </tr>\n                                                ))\n                                            ) : (\n                                                <tr>\n                                                    <td colSpan=\"6\" className=\"text-center text-danger py-3\">\n                                                        Note : No products added yet. Please add products to add opening stock.\n                                                    </td>\n                                                </tr>\n                                            )}\n                                        </>\n                                    }\n                                </tbody>\n                            </table>\n\n                        </Card.Body>\n                    </Card>\n                    <div className=\"text-end\">\n                        <Button\n                            className=\"fw-bold cancel-button me-2\"\n                            onClick={() => navigate(\"/shivay/openingStock\")}\n                        >\n                            Cancel\n                        </Button>\n                        <Button\n                            type=\"submit\"\n                            className=\"custom-button fw-bold\"\n                            disabled={store?.createStockReducer?.loading}\n                            style={{ width: '100px' }}\n                        >\n                            {store?.createStockReducer?.loading ? (\n                                <ButtonLoading color=\"white\" />\n                            ) : isEditMode ? (\n                                'Update'\n                            ) : (\n                                'Submit'\n                            )}\n                        </Button>\n                    </div>\n                </div>\n            </Form>\n\n            <AddProductModal openingProducts={openingProducts} setOpeningProducts={setOpeningProducts} showModal={showModal} handleClose={handleClose} />\n\n        </div>\n    )\n}\n\nexport default AddOpeningStock","import React from 'react';\r\nimport { ColorRing, ThreeDots } from 'react-loader-spinner';\r\nconst Loading = () => {\r\n    return (\r\n        <div style={{ height: '54vh', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n            <ThreeDots\r\n                color=\"#6655D9\"\r\n                strokeWidth=\"5\"\r\n                animationDuration=\"0.75\"\r\n                width=\"70\"\r\n                visible={true}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst DashboardLoading = () => {\r\n    return (\r\n        <div style={{ height: '30vh', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n            <ThreeDots\r\n                color=\"#6655D9\"\r\n                strokeWidth=\"5\"\r\n                animationDuration=\"0.75\"\r\n                width=\"70\"\r\n                visible={true}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst ButtonLoading = () => {\r\n    return (\r\n        // <div style={{ height: \"5vh\", display: 'flex', justifyContent: 'center', alignItems: 'center' }} >\r\n        <div className=\" d-flex justify-content-center align-items-center w-100\" style={{ height: '2.2vh' }}>\r\n            <ColorRing\r\n                visible={true}\r\n                height=\"25\"\r\n                width=\"25\"\r\n                ariaLabel=\"blocks-loading\"\r\n                wrapperStyle={{}}\r\n                wrapperClass=\"blocks-wrapper\"\r\n                colors={['#fff', '#fff', '#fff', '#fff', '#fff']}\r\n            />\r\n\r\n            {/* <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"visually-hidden\">Loading...</span>\r\n            </div> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst CartLoading = () => {\r\n    return (\r\n        // <div style={{ height: \"5vh\", display: 'flex', justifyContent: 'center', alignItems: 'center' }} >\r\n        <div className=\"p-0 d-flex justify-content-center align-items-center m-0\">\r\n            <ColorRing\r\n                visible={true}\r\n                height=\"32\"\r\n                width=\"32\"\r\n                ariaLabel=\"blocks-loading\"\r\n                wrapperStyle={{}}\r\n                wrapperClass=\"blocks-wrapper\"\r\n                colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\r\n            />\r\n\r\n            {/* <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"visually-hidden\">Loading...</span>\r\n            </div> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { Loading, ButtonLoading, CartLoading, DashboardLoading };\r\n","import React, { useEffect, useState } from 'react'\nimport { Modal, Button, Row, Col, Form } from 'react-bootstrap';\nimport Select from 'react-select'; // Import React Select\nimport { createStockCheckActions, searchProductActions } from '../../../../redux/actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport ToastContainer from '../../../../helpers/toast/ToastContainer';\nimport { useLocation } from 'react-router-dom';\n\nconst AddProductModal = ({ showModal, handleClose, openingProducts, setOpeningProducts, selectedWarehouse }) => {\n\n    const dispatch = useDispatch();\n    const { handleSubmit, register, reset } = useForm()\n    const store = useSelector((state) => state)\n    const ProductSearch = store?.searchProductReducer?.searchProduct?.response;\n    const StockCheck = store?.createStockCheckReducer?.createStockCheck;\n    console.log(StockCheck, 'StockCheck')\n    const [searchTerm, setSearchTerm] = useState('');\n    const [productName, setProductName] = useState('');\n    const [quantity, setQuantity] = useState()\n    const location = useLocation()\n    console.log(ProductSearch,'ProductSearch')\n\n    const [searchType, setSearchType] = useState('modelName'); // default search type\n    useEffect(() => {\n        if (location.pathname === '/shivay/addDispatch' && quantity) {\n            dispatch(createStockCheckActions({\n                warehouseId: selectedWarehouse?.value, qty: quantity, productId: ProductSearch?.[0]?._id\n            }))\n        }\n    }, [location, quantity])\n    useEffect(() => {\n        const delayDebounceFn = setTimeout(() => {\n            if (searchTerm) {\n                if (searchType === 'modelName') {\n                    dispatch(searchProductActions({ modelName: searchTerm }));\n                } else if (searchType === 'code') {\n                    dispatch(searchProductActions({ code: searchTerm }));\n                }\n            }\n        }, 500);\n\n        return () => clearTimeout(delayDebounceFn);\n    }, [searchTerm, dispatch, searchType]);\n\n    const modalOptions = ProductSearch?.map((data) => ({\n        value: data?._id,\n        label: data?.modelId?.name,\n        data: data\n    })) || [];\n\n    const codeOptions = ProductSearch?.map((data) => ({\n        value: data?._id,\n        label: data?.code,\n        data: data\n    })) || []\n\n    // State to handle selected options\n    const [selectedModal, setSelectedModal] = useState(null);\n    console.log(selectedModal, 'selectedModalselectedModal')\n    const [selectedCode, setSelectedCode] = useState(null);\n    console.log(selectedCode, 'selectedCode')\n\n    // Handle changes in modal selection\n    const handleModalChange = (selectedOption) => {\n        setSelectedModal(selectedOption);\n        setSelectedCode({\n            value: selectedOption?.data?._id,\n            label: selectedOption?.data?.code,\n            data: selectedOption?.data\n\n        });\n        setProductName(selectedOption?.data?.name);\n    };\n\n    const handleCodeChange = (selectedOption) => {\n        setSelectedCode(selectedOption);\n        setSelectedModal({\n            value: selectedOption?.data?._id,\n            label: selectedOption?.data?.modelId?.name,\n            data: selectedOption?.data\n        });\n        setProductName(selectedOption?.data?.name);\n    };\n\n    useEffect(() => {\n        dispatch(searchProductActions());\n    }, [dispatch]);\n\n    const loadModalOptions = async (inputValue) => {\n        if (!inputValue) return [];\n\n        console.log(inputValue, 'inputValue')\n        dispatch(searchProductActions({ modelName: inputValue }))\n    };\n\n    const onSubmit = (data) => {\n        if (openingProducts?.some((data) => data?.productId === selectedModal?.value)) {\n            ToastContainer('Product Already Exist', 'danger')\n        } else {\n            const productsData = {\n                productId: selectedModal?.value,\n                quantity: quantity,\n                product: selectedModal?.data\n            }\n            console.log(productsData, 'productsData')\n\n            setOpeningProducts(prev => [...prev, productsData]);\n            handleClose();\n            reset();\n            setSelectedCode('');\n            setSelectedModal('');\n            setQuantity('');\n        }\n    }\n    console.log(ProductSearch, 'ProductSearch')\n    console.log(StockCheck, '0987')\n    return (\n        <div>\n            <Modal show={showModal} centered size='lg' onHide={handleClose} backdrop=\"static\" keyboard={false}>\n                <Modal.Header closeButton>\n                    <Modal.Title className='text-black'>Add Product</Modal.Title>\n                </Modal.Header>\n                <Form onSubmit={handleSubmit(onSubmit)}>\n                    <Modal.Body>\n                        {/* Your form or content here */}\n                        <Row>\n                            <Col sm={6}>\n                                <Form.Group className=\"mb-3\">\n                                    <Form.Label className=\"mb-0\">Search By</Form.Label>\n                                    <Form.Select\n                                        value={searchType}\n                                        onChange={(e) => {\n                                            setSearchType(e.target.value);\n                                            setSearchTerm(''); // clear input\n                                            setSelectedModal(null);\n                                            setSelectedCode(null);\n                                            setProductName('');\n                                        }}\n                                    >\n                                        <option value=\"modelName\">Model</option>\n                                        <option value=\"code\">Code</option>\n                                    </Form.Select>\n                                </Form.Group>\n                            </Col>\n\n                            {searchType === 'modelName' ? (\n                                <Col sm={6}>\n                                    <Form.Group className=\"mb-3\">\n                                        <Form.Label className=\"mb-0\">Model Name</Form.Label>\n                                        <Select\n                                            value={selectedModal}\n                                            onChange={handleModalChange}\n                                            onInputChange={(inputValue) => setSearchTerm(inputValue)}\n                                            options={modalOptions}\n                                            placeholder=\"Search Modal\"\n                                            isClearable\n                                            isSearchable\n                                            isLoading={store?.searchProductReducer?.loading}\n                                        />\n                                    </Form.Group>\n                                </Col>\n                            ) : (\n                                <Col sm={6}>\n                                    <Form.Group className=\"mb-3\">\n                                        <Form.Label className=\"mb-0\">Code</Form.Label>\n                                        <Select\n                                            value={selectedCode}\n                                            onChange={handleCodeChange}\n                                            onInputChange={(inputValue) => setSearchTerm(inputValue)}\n                                            options={codeOptions}\n                                            placeholder=\"Search Code\"\n                                            isClearable\n                                            isSearchable\n                                            isLoading={store?.searchProductReducer?.loading}\n                                        />\n                                    </Form.Group>\n                                </Col>\n                            )}\n                            {searchType === 'modelName' ? (\n                                <Col sm={6}>\n                                    <Form.Group className=\"mb-3\">\n                                        <Form.Label className=\"mb-0\" >Code</Form.Label>\n                                        <Form.Control type='text' placeholder=\"Code\" value={selectedCode?.label} />\n                                    </Form.Group>\n                                </Col>\n                            ) : (\n                                <Col sm={6}>\n                                    <Form.Group className=\"mb-3\">\n                                        <Form.Label className=\"mb-0\" >Model Name</Form.Label>\n                                        <Form.Control type='text' placeholder=\"Modal Name\" value={selectedModal?.label} />\n                                    </Form.Group>\n                                </Col>\n                            )}\n\n                            {(selectedModal || selectedCode) && (\n                                <Col sm={6}>\n                                    <Form.Group className=\"mb-3\">\n                                        <Form.Label className=\"mb-0\">Product Name</Form.Label>\n                                        <Form.Control\n                                            type=\"text\"\n                                            value={productName}\n                                            placeholder=\"Enter Product Name\"\n                                            onChange={(e) => setProductName(e.target.value)}\n                                            required\n                                        />\n                                    </Form.Group>\n                                </Col>\n                            )}\n\n                            <Col sm={6}>\n                                <Form.Group className=\"mb-3\">\n                                    <Form.Label className=\"mb-0\">Quantity</Form.Label>\n                                    <Form.Control\n                                        type=\"number\"\n                                        placeholder=\"Enter Number\"\n                                        value={quantity}\n                                        onChange={(e) => {\n                                            const val = parseInt(e.target.value);\n                                            setQuantity(val > 0 ? val : '');\n                                        }}\n                                        required\n                                        min={1}\n                                    />\n                                </Form.Group>\n                            </Col>\n\n                        </Row>\n                        {StockCheck?.status==400 && location.pathname === '/shivay/addDispatch' && (\n                            <Row className=\"px-2\">\n                                <div className=\"py-1 text-center border border-primary rounded bg-light text-primary\">\n                                    {StockCheck?.error || JSON.stringify(StockCheck)}\n                                </div>\n                            </Row>\n                        )}\n\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button className='cancel-button' onClick={handleClose}>\n                            Close\n                        </Button>\n                        <Button type='submit' className='custom-button' >\n                            Save\n                        </Button>\n                    </Modal.Footer>\n                </Form>\n            </Modal>\n        </div>\n    )\n}\n\nexport default AddProductModal"],"names":["props","_jsx","Row","children","Col","_jsxs","className","Breadcrumb","listProps","Item","href","breadCrumbItems","map","item","index","active","style","color","label","path","title","AddOpeningStock","_store$stockListReduc","_store$stockListReduc2","_store$getWarehouseLi","_store$getWarehouseLi2","_store$createStockRed","_store$createStockRed2","_ref2","_ref3","_store$createStockRed3","_store$createStockRed4","dispatch","useDispatch","navigate","useNavigate","handleSubmit","register","setValue","useForm","showModal","setShowModal","useState","store","useSelector","state","today","setToday","Date","toISOString","split","searchParams","useSearchParams","stockId","get","isEditMode","Boolean","StockInData","stockListReducer","stockList","response","console","log","Warehouse","getWarehouseListReducer","searchWarehouse","warehouseOptions","warehouse","value","_id","name","openingProducts","setOpeningProducts","selectedStock","setSelectedStock","selectedWarehouse","setSelectedWarehouse","isEditing","setIsEditing","editedQuantity","setEditedQuantity","quantity","inputRef","useRef","createResponse","createStockReducer","createStock","status","useEffect","getWarehouseListActions","getStockListActions","limit","page","search","length","foundStock","find","updateWarehouses","warehouseData","date","description","handleEditClick","handleQuantityChange","e","target","handleSave","handleKeyPress","key","handleClickOutside","current","contains","document","addEventListener","removeEventListener","PageTitle","Form","onSubmit","data","cleanedProducts","_ref","product","rest","payload","warehouseId","productStock","updateStockActions","createStockActions","sm","Group","Label","Select","onChange","selectedOption","options","placeholder","noOptionsMessage","required","Control","type","as","rows","Button","onClick","handleShow","IoIosAdd","Card","boxShadow","Body","scope","_Fragment","_data$productData","_data$productData2","productData","code","ref","onKeyPress","width","display","marginTop","AiOutlineEdit","cursor","colSpan","_data$product","_data$product2","indexToRemove","updatedProducts","filter","_","handleDeleteProduct","RiDeleteBinLine","disabled","loading","ButtonLoading","AddProductModal","handleClose","Loading","height","justifyContent","alignItems","ThreeDots","strokeWidth","animationDuration","visible","DashboardLoading","ColorRing","ariaLabel","wrapperStyle","wrapperClass","colors","_store$searchProductR","_store$searchProductR2","_store$createStockChe","_store$searchProductR3","_store$searchProductR4","reset","ProductSearch","searchProductReducer","searchProduct","StockCheck","createStockCheckReducer","createStockCheck","searchTerm","setSearchTerm","productName","setProductName","setQuantity","location","useLocation","searchType","setSearchType","_ProductSearch$","pathname","createStockCheckActions","qty","productId","delayDebounceFn","setTimeout","searchProductActions","modelName","clearTimeout","modalOptions","_data$modelId","modelId","codeOptions","selectedModal","setSelectedModal","selectedCode","setSelectedCode","Modal","show","centered","size","onHide","backdrop","keyboard","Header","closeButton","Title","some","ToastContainer","productsData","prev","_selectedOption$data","_selectedOption$data2","_selectedOption$data3","onInputChange","inputValue","isClearable","isSearchable","isLoading","_selectedOption$data4","_selectedOption$data5","_selectedOption$data6","_selectedOption$data7","val","parseInt","min","error","JSON","stringify","Footer"],"sourceRoot":""}