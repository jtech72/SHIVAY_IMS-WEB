{"version":3,"file":"static/js/49.f3a39c41.chunk.js","mappings":"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","sources":["components/NotificationDropdown.js","layouts/Topbar.js"],"sourcesContent":["// @flow\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Dropdown } from 'react-bootstrap';\r\nimport SimpleBar from 'simplebar-react';\r\nimport classNames from 'classnames';\r\nimport { getNotificationActions } from '../redux/actions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport moment from 'moment';\r\n\r\nconst styles = {\r\n    hidden: { maxHeight: '300px', display: 'none' },\r\n    visible: { maxHeight: '300px' },\r\n};\r\n\r\nconst NotificationDropdown = () => {\r\n    const dispatch = useDispatch();\r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n    const [notifStyle, setNotifStyle] = useState(styles.hidden);\r\n    const [expandedIndex, setExpandedIndex] = useState(null);\r\n\r\n    const { notificationData } = useSelector((state) => state.getNotificationDataReducer || {});\r\n    const NotificationData = notificationData?.response || [];\r\n\r\n    useEffect(() => {\r\n        dispatch(getNotificationActions({\r\n            userId: '67c69cd2b073fa62663dced3',\r\n            limit: '',\r\n            page: '',\r\n        }));\r\n    }, [dispatch]);\r\n\r\n    const toggleDropdown = () => {\r\n        setDropdownOpen((prev) => !prev);\r\n        setNotifStyle((prev) => (prev === styles.hidden ? styles.visible : styles.hidden));\r\n    };\r\n\r\n    const groupedData = NotificationData.reduce((acc, item) => {\r\n        const date = moment(item.createdAt);\r\n        const day = date.isSame(moment(), 'day')\r\n            ? 'Today'\r\n            : date.isSame(moment().subtract(1, 'days'), 'day')\r\n                ? 'Yesterday'\r\n                : date.format('YYYY-MM-DD');\r\n\r\n        const msg = {\r\n            message: item.message,\r\n            time: date.format('hh:mm A'),\r\n            subText: item.type || '',\r\n            isRead: item.isRead,\r\n            icon: 'mdi mdi-bell-outline',\r\n            variant: item.isRead ? 'light' : 'primary',\r\n        };\r\n\r\n        const group = acc.find((g) => g.day === day);\r\n        if (group) group.messages.push(msg);\r\n        else acc.push({ day, messages: [msg] });\r\n\r\n        return acc;\r\n    }, []);\r\n\r\n    const handleToggleExpand = (index) => {\r\n        setExpandedIndex(expandedIndex === index ? null : index);\r\n    };\r\n\r\n    const getShortMessage = (msg) => {\r\n        if (msg.length <= 25) return msg;\r\n        return msg.slice(0, 25) + '...';\r\n    };\r\n\r\n    return (\r\n        <Dropdown show={dropdownOpen} onToggle={toggleDropdown}>\r\n            <Dropdown.Toggle\r\n                variant=\"link\"\r\n                id=\"dropdown-notification\"\r\n                as={Link}\r\n                to=\"#\"\r\n                onClick={toggleDropdown}\r\n                className=\"nav-link dropdown-toggle arrow-none\"\r\n            >\r\n                <i className=\"dripicons-bell noti-icon\"></i>\r\n                <span className=\"noti-icon-badge\"></span>\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu align=\"end\" className=\"dropdown-menu-animated dropdown-lg\">\r\n                <div onClick={toggleDropdown}>\r\n                    <div className=\"dropdown-item noti-title px-3\">\r\n                        <h5 className=\"m-0\">Notification</h5>\r\n                    </div>\r\n\r\n                    <SimpleBar className=\"px-3\" style={notifStyle}>\r\n                        {groupedData.length > 0 ? groupedData.map((item, i) => (\r\n                            <React.Fragment key={i}>\r\n                                <h5 className=\"text-muted font-13 fw-normal mt-0\">{item.day}</h5>\r\n                                {item.messages.map((message, index) => {\r\n                                    const globalIndex = `${i}-${index}`;\r\n                                    const isExpanded = expandedIndex === globalIndex;\r\n                                    return (\r\n                                        <Dropdown.Item\r\n                                            key={globalIndex + '-noti'}\r\n                                            className={classNames(\r\n                                                'p-0 notify-item card shadow-none mb-2',\r\n                                                message.isRead ? 'read-noti' : 'unread-noti'\r\n                                            )}\r\n                                            onClick={() => handleToggleExpand(globalIndex)}\r\n                                        >\r\n                                            <Card.Body className=\"p-2\">\r\n                                                <div className=\"d-flex align-items-start\">\r\n                                                    <div className=\"flex-shrink-0\">\r\n                                                        <div className={classNames('notify-icon')} style={{ backgroundColor: '#6655D9' }}>\r\n                                                            <i className={message.icon}></i>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className=\"flex-grow-1 ms-2\">\r\n                                                        <h5 className=\"noti-item-title fw-semibold mb-1\"\r\n                                                            style={{ whiteSpace: 'normal', wordWrap: 'break-word', marginBottom: '4px' }}\r\n                                                        >\r\n                                                            {isExpanded ? message.message : getShortMessage(message.message)}\r\n                                                        </h5>\r\n                                                        <p\r\n                                                            className=\"noti-item-subtitle text-muted mb-1 font-12\"\r\n                                                        >\r\n                                                            {message.time}\r\n                                                        </p>\r\n                                                        <small className=\"text-muted d-block\">{message.subText}</small>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </Card.Body>\r\n                                        </Dropdown.Item>\r\n                                    );\r\n                                })}\r\n                            </React.Fragment>\r\n                        )) : (\r\n                            <div className=\"text-center text-muted py-3\">No notifications available</div>\r\n                        )}\r\n                    </SimpleBar>\r\n\r\n                    <Dropdown.Item className=\"text-center notify-item border-top border-light py-2 fw-bold\" style={{ color: '#6655D9' }}>\r\n                        View All\r\n                    </Dropdown.Item>\r\n                </div>\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    );\r\n};\r\n\r\nexport default NotificationDropdown;\r\n","// @flow\r\nimport React, { useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport classNames from 'classnames';\r\nimport { Logo, Shivay_Logo } from '../helpers/image'\r\n// actions\r\nimport { changeSidebarType } from '../redux/actions';\r\n\r\n// components\r\nimport ProfileDropdown from '../components/ProfileDropdown';\r\nimport NotificationDropdown from '../components/NotificationDropdown';\r\n\r\n//constants\r\nimport * as layoutConstants from '../constants/layout';\r\nconst Notifications = []\r\n// get the profilemenu\r\nconst ProfileMenus = [\r\n    // {\r\n    //     label: 'My Account',\r\n    //     icon: 'mdi mdi-account-circle',\r\n    //     redirectTo: '#',\r\n    // },\r\n    // {\r\n    //     label: 'Settings',\r\n    //     icon: 'mdi mdi-account-edit',\r\n    //     redirectTo: '#',\r\n    // },\r\n    // {\r\n    //     label: 'Support',\r\n    //     icon: 'mdi mdi-lifebuoy',\r\n    //     redirectTo: '#',\r\n    // },\r\n    // {\r\n    //     label: 'Lock Screen',\r\n    //     icon: 'mdi mdi-lock-outline',\r\n    //     redirectTo: '/account/lock-screen',\r\n    // },\r\n    {\r\n        label: 'Logout',\r\n        icon: 'mdi mdi-logout',\r\n        redirectTo: '/account/logout',\r\n    },\r\n];\r\n\r\ntype TopbarProps = {\r\n    hideLogo?: boolean,\r\n    navCssClasses?: string,\r\n    openLeftMenuCallBack?: () => void,\r\n    topbarDark?: boolean,\r\n};\r\n\r\nconst Topbar = ({ hideLogo, navCssClasses, openLeftMenuCallBack, topbarDark }: TopbarProps): React$Element<any> => {\r\n    const dispatch = useDispatch();\r\n\r\n    const [isopen, setIsopen] = useState(false);\r\n    const navigate = useNavigate()\r\n    const navbarCssClasses = navCssClasses || '';\r\n    const containerCssClasses = !hideLogo ? 'container-fluid' : '';\r\n\r\n    const { layoutType, leftSideBarType } = useSelector((state) => ({\r\n        layoutType: state.Layout.layoutType,\r\n        leftSideBarType: state.Layout.leftSideBarType,\r\n    }));\r\n\r\n    /**\r\n     * Toggle the leftmenu when having mobile screen\r\n     */\r\n    const handleLeftMenuCallBack = () => {\r\n        setIsopen((prevState) => !prevState);\r\n        if (openLeftMenuCallBack) openLeftMenuCallBack();\r\n\r\n        switch (layoutType) {\r\n            case layoutConstants.LAYOUT_VERTICAL:\r\n                // condition added\r\n                if (window.innerWidth >= 768) {\r\n                    if (leftSideBarType === 'fixed' || leftSideBarType === 'scrollable')\r\n                        dispatch(changeSidebarType(layoutConstants.LEFT_SIDEBAR_TYPE_CONDENSED));\r\n                    if (leftSideBarType === 'condensed')\r\n                        dispatch(changeSidebarType(layoutConstants.LEFT_SIDEBAR_TYPE_FIXED));\r\n                }\r\n                break;\r\n\r\n            case layoutConstants.LAYOUT_FULL:\r\n                if (document.body) {\r\n                    document.body.classList.toggle('hide-menu');\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Toggles the right sidebar\r\n     */\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={classNames('navbar-custom', navbarCssClasses)}>\r\n                <div className={containerCssClasses}>\r\n                    {!hideLogo && (\r\n                        <Link to=\"/\" className=\"topnav-logo\">\r\n                            <span className=\"topnav-logo-lg\">\r\n                                <img src={Logo} alt=\"logo\" height=\"70\" />\r\n                            </span>\r\n                            <span className=\"topnav-logo-sm\">\r\n                                <img src={topbarDark ? Logo : Logo} alt=\"logo\" height=\"50\" />\r\n                            </span>\r\n                        </Link>\r\n                    )}\r\n\r\n                    <ul className=\"list-unstyled topbar-menu float-end mb-0\">\r\n                        {/* <li className=\"dropdown notification-list topbar-dropdown d-none d-lg-block\">\r\n                            <LanguageDropdown />\r\n                        </li> */}\r\n                        <li className=\"dropdown notification-list\" title=\"Notifications\">\r\n                            <NotificationDropdown notifications={Notifications} />\r\n                        </li>\r\n                        {/* <li className=\"dropdown notification-list d-none d-sm-inline-block\">\r\n                            <AppsDropdown />\r\n                        </li> */}\r\n                        {/* <li className=\"notification-list\">\r\n                            <button\r\n                                className=\"nav-link dropdown-toggle end-bar-toggle arrow-none btn btn-link shadow-none\"\r\n                                onClick={handleRightSideBar}>\r\n                                <i className=\"dripicons-gear noti-icon\"></i>\r\n                            </button>\r\n                        </li> */}\r\n\r\n                        <li className=\"dropdown notification-list d-flex align-items-center justify-content-center ps-2 mt-2\" style={{borderLeft:'2px solid #E8EAE9'}}>\r\n                            <i className='mdi mdi-logout fs-3 cursor' title=\"Log Out\" style={{marginTop:'6px'}} onClick={() => navigate('/account/logout')}></i>\r\n                        </li>\r\n\r\n                    </ul>\r\n\r\n                    {/* toggle for vertical layout */}\r\n                    {(layoutType === layoutConstants.LAYOUT_VERTICAL || layoutType === layoutConstants.LAYOUT_FULL) && (\r\n                        <button className=\"button-menu-mobile open-left\" onClick={handleLeftMenuCallBack}>\r\n                            <i className=\"mdi mdi-menu\" />\r\n                        </button>\r\n                    )}\r\n\r\n                    {/* toggle for horizontal layout */}\r\n                    {layoutType === layoutConstants.LAYOUT_HORIZONTAL && (\r\n                        <Link\r\n                            to=\"#\"\r\n                            className={classNames('navbar-toggle', { open: isopen })}\r\n                            onClick={handleLeftMenuCallBack}>\r\n                            <div className=\"lines\">\r\n                                <span></span>\r\n                                <span></span>\r\n                                <span></span>\r\n                            </div>\r\n                        </Link>\r\n                    )}\r\n\r\n                    {/* toggle for detached layout */}\r\n                    {layoutType === layoutConstants.LAYOUT_DETACHED && (\r\n                        <Link to=\"#\" className=\"button-menu-mobile disable-btn\" onClick={handleLeftMenuCallBack}>\r\n                            <div className=\"lines\">\r\n                                <span></span>\r\n                                <span></span>\r\n                                <span></span>\r\n                            </div>\r\n                        </Link>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Topbar;\r\n"],"names":["styles","hidden","maxHeight","display","visible","NotificationDropdown","dispatch","useDispatch","dropdownOpen","setDropdownOpen","useState","notifStyle","setNotifStyle","expandedIndex","setExpandedIndex","notificationData","useSelector","state","getNotificationDataReducer","NotificationData","response","useEffect","getNotificationActions","userId","limit","page","toggleDropdown","prev","groupedData","reduce","acc","item","date","moment","createdAt","day","isSame","subtract","format","msg","message","time","subText","type","isRead","icon","variant","group","find","g","messages","push","_jsxs","Dropdown","show","onToggle","children","Toggle","id","as","Link","to","onClick","className","_jsx","Menu","align","SimpleBar","style","length","map","i","React","index","globalIndex","isExpanded","Item","classNames","handleToggleExpand","Card","Body","backgroundColor","whiteSpace","wordWrap","marginBottom","slice","color","Notifications","_ref","hideLogo","navCssClasses","openLeftMenuCallBack","topbarDark","isopen","setIsopen","navigate","useNavigate","navbarCssClasses","containerCssClasses","layoutType","leftSideBarType","Layout","handleLeftMenuCallBack","prevState","layoutConstants","window","innerWidth","changeSidebarType","document","body","classList","toggle","_Fragment","src","Logo","alt","height","title","notifications","borderLeft","marginTop","open"],"sourceRoot":""}