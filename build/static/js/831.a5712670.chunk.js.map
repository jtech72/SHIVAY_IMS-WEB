{"version":3,"file":"static/js/831.a5712670.chunk.js","mappings":"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","sources":["components/VerticalForm.js","components/FormInput.js","helpers/loader/Loading.js","pages/account/Login.js","pages/account/AccountLayout.js"],"sourcesContent":["// @flow\r\nimport React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\n\r\ntype VerticalFromProps = {\r\n    defaultValues?: Object,\r\n    resolver?: any,\r\n    children?: any,\r\n    onSubmit?: (value: any) => void,\r\n    formClass?: string,\r\n};\r\n\r\nconst VerticalForm = ({\r\n    defaultValues,\r\n    resolver,\r\n    children,\r\n    onSubmit,\r\n    formClass,\r\n}: VerticalFromProps): React$Element<any> => {\r\n    /*\r\n     * form methods\r\n     */\r\n    const methods = useForm({ defaultValues, resolver });\r\n    const {\r\n        handleSubmit,\r\n        register,\r\n        control,\r\n        formState: { errors },\r\n    } = methods;\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\r\n            {Array.isArray(children)\r\n                ? children.map((child) => {\r\n                      return child.props && child.props.name\r\n                          ? React.createElement(child.type, {\r\n                                ...{\r\n                                    ...child.props,\r\n                                    register,\r\n                                    key: child.props.name,\r\n                                    errors,\r\n                                    control,\r\n                                },\r\n                            })\r\n                          : child;\r\n                  })\r\n                : children}\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default VerticalForm;\r\n","// @flow\r\nimport React, { useState } from 'react';\r\nimport { Form, InputGroup } from 'react-bootstrap';\r\nimport classNames from 'classnames';\r\n\r\n/* Password Input */\r\nconst PasswordInput = ({ name, placeholder, refCallback, errors, register, className }) => {\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    return (\r\n        <>\r\n            <InputGroup className=\"mb-0\">\r\n                <Form.Control\r\n                    type={showPassword ? 'text' : 'password'}\r\n                    placeholder={placeholder}\r\n                    name={name}\r\n                    id={name}\r\n                    as=\"input\"\r\n                    ref={(r) => {\r\n                        if (refCallback) refCallback(r);\r\n                    }}\r\n                    className={className}\r\n                    isInvalid={errors && errors[name] ? true : false}\r\n                    {...(register ? register(name) : {})}\r\n                    autoComplete={name}\r\n                />\r\n                <div\r\n                    className={classNames('input-group-text', 'input-group-password', {\r\n                        'show-password': showPassword,\r\n                    })}\r\n                    data-password={showPassword ? 'true' : 'false'}>\r\n                    <span\r\n                        className=\"password-eye\"\r\n                        onClick={() => {\r\n                            setShowPassword(!showPassword);\r\n                        }}></span>\r\n                </div>\r\n            </InputGroup>\r\n        </>\r\n    );\r\n};\r\n\r\ntype FormInputProps = {\r\n    label?: string,\r\n    type?: string,\r\n    name?: string,\r\n    placeholder?: string,\r\n    register?: any,\r\n    errors?: any,\r\n    className?: string,\r\n    labelClassName?: string,\r\n    containerClass?: string,\r\n    refCallback?: any,\r\n    children?: any,\r\n};\r\n\r\nconst FormInput = ({\r\n    label,\r\n    type,\r\n    name,\r\n    placeholder,\r\n    register,\r\n    errors,\r\n    className,\r\n    labelClassName,\r\n    containerClass,\r\n    refCallback,\r\n    children,\r\n    ...otherProps\r\n}: FormInputProps): React$Element<React$FragmentType> => {\r\n    // handle input type\r\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\r\n\r\n    return (\r\n        <>\r\n            {type === 'hidden' ? (\r\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\r\n            ) : (\r\n                <>\r\n                    {type === 'password' ? (\r\n                        <>\r\n                            <Form.Group className={containerClass}>\r\n                                {label ? (\r\n                                    <>\r\n                                        {' '}\r\n                                        <Form.Label className={labelClassName}>{label}</Form.Label> {children}{' '}\r\n                                    </>\r\n                                ) : null}\r\n                                <PasswordInput\r\n                                    name={name}\r\n                                    placeholder={placeholder}\r\n                                    refCallback={refCallback}\r\n                                    errors={errors}\r\n                                    register={register}\r\n                                    className={className}\r\n                                />\r\n\r\n                                {errors && errors[name] ? (\r\n                                    <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\r\n                                        {errors[name]['message']}\r\n                                    </Form.Control.Feedback>\r\n                                ) : null}\r\n                            </Form.Group>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            {type === 'select' ? (\r\n                                <>\r\n                                    <Form.Group className={containerClass}>\r\n                                        {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\r\n\r\n                                        <Form.Select\r\n                                            type={type}\r\n                                            label={label}\r\n                                            name={name}\r\n                                            id={name}\r\n                                            ref={(r) => {\r\n                                                if (refCallback) refCallback(r);\r\n                                            }}\r\n                                            comp={comp}\r\n                                            className={className}\r\n                                            isInvalid={errors && errors[name] ? true : false}\r\n                                            {...(register ? register(name) : {})}\r\n                                            {...otherProps}>\r\n                                            {children}\r\n                                        </Form.Select>\r\n\r\n                                        {errors && errors[name] ? (\r\n                                            <Form.Control.Feedback type=\"invalid\">\r\n                                                {errors[name]['message']}\r\n                                            </Form.Control.Feedback>\r\n                                        ) : null}\r\n                                    </Form.Group>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    {type === 'checkbox' || type === 'radio' ? (\r\n                                        <>\r\n                                            <Form.Group className={containerClass}>\r\n                                                <Form.Check\r\n                                                    type={type}\r\n                                                    label={label}\r\n                                                    name={name}\r\n                                                    id={name}\r\n                                                    ref={(r) => {\r\n                                                        if (refCallback) refCallback(r);\r\n                                                    }}\r\n                                                    className={className}\r\n                                                    isInvalid={errors && errors[name] ? true : false}\r\n                                                    {...(register ? register(name) : {})}\r\n                                                    {...otherProps}\r\n                                                />\r\n\r\n                                                {errors && errors[name] ? (\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        {errors[name]['message']}\r\n                                                    </Form.Control.Feedback>\r\n                                                ) : null}\r\n                                            </Form.Group>\r\n                                        </>\r\n                                    ) : (\r\n                                        <Form.Group className={containerClass}>\r\n                                            {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\r\n\r\n                                            <Form.Control\r\n                                                type={type}\r\n                                                placeholder={placeholder}\r\n                                                name={name}\r\n                                                id={name}\r\n                                                as={comp}\r\n                                                ref={(r) => {\r\n                                                    if (refCallback) refCallback(r);\r\n                                                }}\r\n                                                className={className}\r\n                                                isInvalid={errors && errors[name] ? true : false}\r\n                                                {...(register ? register(name) : {})}\r\n                                                {...otherProps}\r\n                                                autoComplete={name}>\r\n                                                {children ? children : null}\r\n                                            </Form.Control>\r\n\r\n                                            {errors && errors[name] ? (\r\n                                                <Form.Control.Feedback type=\"invalid\">\r\n                                                    {errors[name]['message']}\r\n                                                </Form.Control.Feedback>\r\n                                            ) : null}\r\n                                        </Form.Group>\r\n                                    )}\r\n                                </>\r\n                            )}\r\n                        </>\r\n                    )}\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FormInput;\r\n","import React from 'react';\r\nimport { ColorRing, RotatingLines } from 'react-loader-spinner';\r\nconst Loading = () => {\r\n    return (\r\n        <div style={{ height: '50vh', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n            <RotatingLines\r\n                strokeColor=\"grey\"\r\n                strokeWidth=\"5\"\r\n                animationDuration=\"0.75\"\r\n                width=\"96\"\r\n                visible={true}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst ButtonLoading = () => {\r\n    return (\r\n        // <div style={{ height: \"5vh\", display: 'flex', justifyContent: 'center', alignItems: 'center' }} >\r\n        <div className=\" d-flex justify-content-center align-items-center w-100\">\r\n            <ColorRing\r\n                visible={true}\r\n                height=\"30\"\r\n                width=\"30\"\r\n                ariaLabel=\"blocks-loading\"\r\n                wrapperStyle={{}}\r\n                wrapperClass=\"blocks-wrapper\"\r\n                colors={['#fff', '#fff', '#fff', '#fff', '#fff']}\r\n            />\r\n\r\n            {/* <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"visually-hidden\">Loading...</span>\r\n            </div> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst CartLoading = () => {\r\n    return (\r\n        // <div style={{ height: \"5vh\", display: 'flex', justifyContent: 'center', alignItems: 'center' }} >\r\n        <div className=\"p-0 d-flex justify-content-center align-items-center m-0\">\r\n            <ColorRing\r\n                visible={true}\r\n                height=\"32\"\r\n                width=\"32\"\r\n                ariaLabel=\"blocks-loading\"\r\n                wrapperStyle={{}}\r\n                wrapperClass=\"blocks-wrapper\"\r\n                colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\r\n            />\r\n\r\n            {/* <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"visually-hidden\">Loading...</span>\r\n            </div> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { Loading, ButtonLoading, CartLoading };\r\n","import React, { useEffect } from 'react';\r\nimport { Button, Alert, Form } from 'react-bootstrap';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\nimport * as yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n// actions\r\nimport { resetAuth, loginUser, getRolesListActions } from '../../redux/actions';\r\n\r\n// components\r\nimport { VerticalForm, FormInput } from '../../components/';\r\nimport AccountLayout from './AccountLayout';\r\nimport { useForm } from 'react-hook-form';\r\nimport { ButtonLoading } from '../../helpers/loader/Loading';\r\n\r\nconst Login = (): React$Element<any> => {\r\n    const { t } = useTranslation();\r\n    const dispatch = useDispatch();\r\n    const location = useLocation();\r\n    const redirectUrl = location.state?.from?.pathname || '/';\r\n\r\n    const { rolesList } = useSelector((state) => state.rolesListReducer || {});\r\n    const RolesData = rolesList?.response || [];\r\n\r\n    const { loading, userLoggedIn, user, error } = useSelector((state) => ({\r\n        loading: state.Auth.loading,\r\n        user: state.Auth.user,\r\n        error: state.Auth.error,\r\n        userLoggedIn: state.Auth.userLoggedIn,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        dispatch(getRolesListActions());\r\n    }, [dispatch]);\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm({\r\n        resolver: yupResolver(\r\n            yup.object().shape({\r\n                // role: yup.string().required(t('Please select a role')),\r\n                email: yup.string().required(t('Please enter email')),\r\n                password: yup.string().required(t('Please enter Password')),\r\n            })\r\n        ),\r\n    });\r\n\r\n    const onSubmit = (data) => {\r\n        console.log('Submitted:', data);\r\n        const payload={\r\n            ...data,\r\n            fireBaseId:''\r\n        }\r\n        dispatch(loginUser(payload));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {(userLoggedIn || user) && <Navigate to={redirectUrl} replace />}\r\n\r\n            <AccountLayout>\r\n                <div className=\"text-center w-75 m-auto\">\r\n                    <h4 className=\"text-dark-50 text-center mt-0 fw-bold\">{t('Log In')}</h4>\r\n                    <p className=\"text-muted mb-4\">\r\n                        {t('Enter your email address and password to access admin panel.')}\r\n                    </p>\r\n                </div>\r\n\r\n                {error && (\r\n                    <Alert variant=\"danger\" className=\"my-2\">\r\n                        {error}\r\n                    </Alert>\r\n                )}\r\n\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <Form.Group className=\"mb-3\" controlId=\"role\">\r\n                        <Form.Label>{t('Role')}</Form.Label>\r\n                        <Form.Select {...register('roleId')} defaultValue=\"\">\r\n                            <option value=\"\" disabled>\r\n                                {t('Select Role')}\r\n                            </option>\r\n                            {RolesData.map((role) => (\r\n                                <option key={role._id} value={role._id} className='text-capitalize'>\r\n                                    {role.name}\r\n                                </option>\r\n                            ))}\r\n                        </Form.Select>\r\n                        {errors.role && (\r\n                            <div className=\"text-danger mt-1\">{errors.role.message}</div>\r\n                        )}\r\n                    </Form.Group>\r\n\r\n                    <FormInput\r\n                        label={t('Email')}\r\n                        type=\"text\"\r\n                        name=\"email\"\r\n                        register={register}\r\n                        error={errors.email}\r\n                        placeholder={t('Enter your email')}\r\n                        containerClass=\"mb-3\"\r\n                    />\r\n\r\n                    <FormInput\r\n                        label={t('Password')}\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        register={register}\r\n                        error={errors.password}\r\n                        placeholder={t('Enter your password')}\r\n                        containerClass=\"mb-3\"\r\n                    />\r\n\r\n                    <div className=\"mb-3 mb-0 text-center\">\r\n                        <Button variant=\"primary\" type=\"submit\" disabled={loading}>\r\n                            {!loading ? t('Log In') : <ButtonLoading />}\r\n                        </Button>\r\n                    </div>\r\n                </form>\r\n            </AccountLayout>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","// @flow\r\nimport React, { useEffect } from 'react';\r\nimport { Container, Row, Col, Card } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n// images\r\nimport { Logo, Shivay_Logo } from '../../helpers/image';\r\n\r\ntype AccountLayoutProps = {\r\n    bottomLinks?: React$Element<any>,\r\n    children?: any,\r\n};\r\n\r\nconst AccountLayout = ({ bottomLinks, children }: AccountLayoutProps): React$Element<any> => {\r\n    const { t } = useTranslation();\r\n    const currentYear = new Date().getFullYear();\r\n\r\n    useEffect(() => {\r\n        if (document.body) document.body.classList.add('authentication-bg');\r\n\r\n        return () => {\r\n            if (document.body) document.body.classList.remove('authentication-bg');\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"account-pages pt-2 pt-sm-5 pb-4 pb-sm-5\">\r\n                <Container>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Col md={8} lg={6} xl={5} xxl={4}>\r\n                            <Card>\r\n                                {/* logo */}\r\n                                <Card.Header className=\" text-center bg-primary\" >\r\n                                    <Link to=\"/\">\r\n                                        <span>\r\n                                            <img src={Shivay_Logo} alt=\"\" height=\"70\" className='bg-primary rounded-pill px-3' />\r\n                                        </span>\r\n                                    </Link>\r\n                                </Card.Header>\r\n                                <Card.Body className=\"p-4\">{children}</Card.Body>\r\n                            </Card>\r\n\r\n                            {/* bottom links */}\r\n                            {bottomLinks}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n            <footer className=\"footer footer-alt\">{currentYear} © SHIVAY - <a href=\"https://rowthtech.com/\" className='text-muted'><u>rowthtech.com</u></a></footer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AccountLayout;\r\n"],"names":["_ref","defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","formState","errors","_jsx","className","noValidate","Array","isArray","map","child","props","name","React","type","key","PasswordInput","placeholder","refCallback","showPassword","setShowPassword","useState","_Fragment","_jsxs","InputGroup","Form","Control","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","_ref2","label","labelClassName","containerClass","otherProps","comp","Group","Label","Feedback","Select","Check","ButtonLoading","ColorRing","visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors","Login","_location$state","_location$state$from","t","useTranslation","dispatch","useDispatch","redirectUrl","useLocation","state","from","pathname","rolesList","useSelector","rolesListReducer","RolesData","response","loading","userLoggedIn","user","error","Auth","useEffect","getRolesListActions","yupResolver","yup","shape","email","required","password","Navigate","to","replace","AccountLayout","Alert","variant","data","console","log","payload","fireBaseId","loginUser","controlId","defaultValue","value","disabled","role","_id","message","FormInput","Button","bottomLinks","currentYear","Date","getFullYear","document","body","classList","add","remove","Container","Row","Col","md","lg","xl","xxl","Card","Header","Link","src","Shivay_Logo","alt","Body","href"],"sourceRoot":""}