{"version":3,"file":"static/js/909.4f430eb9.chunk.js","mappings":"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","sources":["../node_modules/dom-helpers/esm/ownerDocument.js","components/NotificationDropdown.js","layouts/Topbar.js","../node_modules/dom-helpers/esm/listen.js","../node_modules/@restart/ui/esm/useWindow.js","../node_modules/dom-helpers/esm/contains.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useMounted.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useIsomorphicEffect.js","../node_modules/dom-helpers/esm/addEventListener.js","../node_modules/dom-helpers/esm/querySelectorAll.js","../node_modules/@restart/ui/esm/Button.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/usePrevious.js","../node_modules/@restart/ui/esm/DataKey.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useCommittedRef.js","../node_modules/@restart/hooks/esm/useCommittedRef.js","../node_modules/@restart/hooks/esm/useEventCallback.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useResizeObserver.js","../node_modules/@restart/ui/esm/Anchor.js","../node_modules/dom-helpers/esm/removeEventListener.js","../node_modules/dom-helpers/esm/canUseDOM.js","../node_modules/@restart/hooks/esm/useMergedRefs.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useCallbackRef.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useEventCallback.js","../node_modules/react-bootstrap/esm/InputGroupContext.js","../node_modules/@restart/ui/node_modules/@restart/hooks/esm/useEventListener.js"],"sourcesContent":["/**\n * Returns the owner document of a given element.\n * \n * @param node the element\n */\nexport default function ownerDocument(node) {\n  return node && node.ownerDocument || document;\n}","// @flow\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Dropdown } from 'react-bootstrap';\r\nimport SimpleBar from 'simplebar-react';\r\nimport classNames from 'classnames';\r\n\r\n// notifiaction continer styles\r\nconst notificationContainerStyle = {\r\n    maxHeight: '300px',\r\n    display: 'none',\r\n};\r\n\r\nconst notificationShowContainerStyle = {\r\n    maxHeight: '300px',\r\n};\r\n\r\ntype Message = {\r\n    id: number,\r\n    title: string,\r\n    time?: string,\r\n    subText: string,\r\n    avatar?: string,\r\n    icon?: string,\r\n    variant?: string,\r\n    isRead: boolean,\r\n};\r\n\r\ntype NotificationItem = {\r\n    day: string,\r\n    messages: Message[],\r\n};\r\n\r\ntype NotificationDropdownProps = {\r\n    notifications: Array<NotificationItem>,\r\n};\r\n\r\ntype NotificationDropdownState = {\r\n    dropdownOpen?: boolean,\r\n    notificationContainerStyle?: {},\r\n};\r\n\r\nconst NotificationDropdown = (\r\n    props: NotificationDropdownProps,\r\n    state: NotificationDropdownState\r\n): React$Element<any> => {\r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n    const [notificationContentStyle, setNotificationContentStyles] = useState(notificationContainerStyle);\r\n\r\n    /*\r\n     * toggle notification-dropdown\r\n     */\r\n    const toggleDropdown = () => {\r\n        setDropdownOpen(!dropdownOpen);\r\n        setNotificationContentStyles(\r\n            notificationContentStyle === notificationContainerStyle\r\n                ? notificationShowContainerStyle\r\n                : notificationContainerStyle\r\n        );\r\n    };\r\n\r\n    return (\r\n        <Dropdown show={dropdownOpen} onToggle={toggleDropdown}>\r\n            <Dropdown.Toggle\r\n                variant=\"link\"\r\n                id=\"dropdown-notification\"\r\n                as={Link}\r\n                to=\"#\"\r\n                onClick={toggleDropdown}\r\n                className=\"nav-link dropdown-toggle arrow-none\">\r\n                <i className=\"dripicons-bell noti-icon\"></i>\r\n                <span className=\"noti-icon-badge\"></span>\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu align={'end'} className=\"dropdown-menu-animated dropdown-lg\">\r\n                <div onClick={toggleDropdown}>\r\n                    <div className=\"dropdown-item noti-title px-3\">\r\n                        <h5 className=\"m-0\">\r\n                            <span className=\"float-end\">\r\n                                <Link to=\"/notifications\" className=\"text-dark\">\r\n                                    <small>Clear All</small>\r\n                                </Link>\r\n                            </span>\r\n                            Notification\r\n                        </h5>\r\n                    </div>\r\n                    <SimpleBar className=\"px-3\" style={notificationContentStyle}>\r\n                        {props.notifications.map((item, i) => {\r\n                            return (\r\n                                <React.Fragment key={i.toString()}>\r\n                                    <h5 className=\"text-muted font-13 fw-normal mt-0\">{item.day}</h5>\r\n                                    {(item.messages || []).map((message, index) => {\r\n                                        return (\r\n                                            <Dropdown.Item\r\n                                                key={index + '-noti'}\r\n                                                className={classNames(\r\n                                                    'p-0 notify-item card shadow-none mb-2',\r\n                                                    message.isRead ? 'read-noti' : 'unread-noti'\r\n                                                )}>\r\n                                                <Card.Body>\r\n                                                    <span className=\"float-end noti-close-btn text-muted\">\r\n                                                        <i className=\"mdi mdi-close\"></i>\r\n                                                    </span>\r\n                                                    <div className=\"d-flex align-items-center\">\r\n                                                        <div className=\"flex-shrink-0\">\r\n                                                            <div\r\n                                                                className={classNames(\r\n                                                                    'notify-icon',\r\n                                                                    message.variant && 'bg-' + message.variant\r\n                                                                )}>\r\n                                                                {message.avatar ? (\r\n                                                                    <img\r\n                                                                        src={message.avatar}\r\n                                                                        className=\"img-fluid rounded-circle\"\r\n                                                                        alt=\"\"\r\n                                                                    />\r\n                                                                ) : (\r\n                                                                    <i className={message.icon}></i>\r\n                                                                )}\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        <div className=\"flex-grow-1 text-truncate ms-2\">\r\n                                                            <h5 className=\"noti-item-title fw-semibold font-14\">\r\n                                                                {message.title}{' '}\r\n                                                                {message.time && (\r\n                                                                    <small className=\"fw-normal text-muted ms-1\">\r\n                                                                        {message.time}\r\n                                                                    </small>\r\n                                                                )}\r\n                                                            </h5>\r\n                                                            <small className=\"noti-item-subtitle text-muted\">\r\n                                                                {message.subText}\r\n                                                            </small>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </Card.Body>\r\n                                            </Dropdown.Item>\r\n                                        );\r\n                                    })}\r\n                                </React.Fragment>\r\n                            );\r\n                        })}\r\n\r\n                        <div className=\"text-center\">\r\n                            <i className=\"mdi mdi-dots-circle mdi-spin text-muted h3 mt-0\"></i>\r\n                        </div>\r\n                    </SimpleBar>\r\n\r\n                    <Dropdown.Item className=\"text-center text-primary notify-item border-top border-light py-2\">\r\n                        View All\r\n                    </Dropdown.Item>\r\n                </div>\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    );\r\n};\r\n\r\nexport default NotificationDropdown;\r\n","// @flow\r\nimport React, { useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport classNames from 'classnames';\r\nimport { Logo, Shivay_Logo } from '../helpers/image'\r\n// actions\r\nimport { changeSidebarType } from '../redux/actions';\r\n\r\n// components\r\nimport ProfileDropdown from '../components/ProfileDropdown';\r\nimport NotificationDropdown from '../components/NotificationDropdown';\r\n\r\n//constants\r\nimport * as layoutConstants from '../constants/layout';\r\nconst Notifications = []\r\n// get the profilemenu\r\nconst ProfileMenus = [\r\n    // {\r\n    //     label: 'My Account',\r\n    //     icon: 'mdi mdi-account-circle',\r\n    //     redirectTo: '#',\r\n    // },\r\n    // {\r\n    //     label: 'Settings',\r\n    //     icon: 'mdi mdi-account-edit',\r\n    //     redirectTo: '#',\r\n    // },\r\n    // {\r\n    //     label: 'Support',\r\n    //     icon: 'mdi mdi-lifebuoy',\r\n    //     redirectTo: '#',\r\n    // },\r\n    // {\r\n    //     label: 'Lock Screen',\r\n    //     icon: 'mdi mdi-lock-outline',\r\n    //     redirectTo: '/account/lock-screen',\r\n    // },\r\n    {\r\n        label: 'Logout',\r\n        icon: 'mdi mdi-logout',\r\n        redirectTo: '/account/logout',\r\n    },\r\n];\r\n\r\ntype TopbarProps = {\r\n    hideLogo?: boolean,\r\n    navCssClasses?: string,\r\n    openLeftMenuCallBack?: () => void,\r\n    topbarDark?: boolean,\r\n};\r\n\r\nconst Topbar = ({ hideLogo, navCssClasses, openLeftMenuCallBack, topbarDark }: TopbarProps): React$Element<any> => {\r\n    const dispatch = useDispatch();\r\n\r\n    const [isopen, setIsopen] = useState(false);\r\n    const navigate = useNavigate()\r\n    const navbarCssClasses = navCssClasses || '';\r\n    const containerCssClasses = !hideLogo ? 'container-fluid' : '';\r\n\r\n    const { layoutType, leftSideBarType } = useSelector((state) => ({\r\n        layoutType: state.Layout.layoutType,\r\n        leftSideBarType: state.Layout.leftSideBarType,\r\n    }));\r\n\r\n    /**\r\n     * Toggle the leftmenu when having mobile screen\r\n     */\r\n    const handleLeftMenuCallBack = () => {\r\n        setIsopen((prevState) => !prevState);\r\n        if (openLeftMenuCallBack) openLeftMenuCallBack();\r\n\r\n        switch (layoutType) {\r\n            case layoutConstants.LAYOUT_VERTICAL:\r\n                // condition added\r\n                if (window.innerWidth >= 768) {\r\n                    if (leftSideBarType === 'fixed' || leftSideBarType === 'scrollable')\r\n                        dispatch(changeSidebarType(layoutConstants.LEFT_SIDEBAR_TYPE_CONDENSED));\r\n                    if (leftSideBarType === 'condensed')\r\n                        dispatch(changeSidebarType(layoutConstants.LEFT_SIDEBAR_TYPE_FIXED));\r\n                }\r\n                break;\r\n\r\n            case layoutConstants.LAYOUT_FULL:\r\n                if (document.body) {\r\n                    document.body.classList.toggle('hide-menu');\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Toggles the right sidebar\r\n     */\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={classNames('navbar-custom', navbarCssClasses)}>\r\n                <div className={containerCssClasses}>\r\n                    {!hideLogo && (\r\n                        <Link to=\"/\" className=\"topnav-logo\">\r\n                            <span className=\"topnav-logo-lg\">\r\n                                <img src={Logo} alt=\"logo\" height=\"70\" />\r\n                            </span>\r\n                            <span className=\"topnav-logo-sm\">\r\n                                <img src={topbarDark ? Logo : Logo} alt=\"logo\" height=\"50\" />\r\n                            </span>\r\n                        </Link>\r\n                    )}\r\n\r\n                    <ul className=\"list-unstyled topbar-menu float-end mb-0\">\r\n                        {/* <li className=\"dropdown notification-list topbar-dropdown d-none d-lg-block\">\r\n                            <LanguageDropdown />\r\n                        </li> */}\r\n                        <li className=\"dropdown notification-list\" title=\"Notifications\">\r\n                            <NotificationDropdown notifications={Notifications} />\r\n                        </li>\r\n                        {/* <li className=\"dropdown notification-list d-none d-sm-inline-block\">\r\n                            <AppsDropdown />\r\n                        </li> */}\r\n                        {/* <li className=\"notification-list\">\r\n                            <button\r\n                                className=\"nav-link dropdown-toggle end-bar-toggle arrow-none btn btn-link shadow-none\"\r\n                                onClick={handleRightSideBar}>\r\n                                <i className=\"dripicons-gear noti-icon\"></i>\r\n                            </button>\r\n                        </li> */}\r\n\r\n                        <li className=\"dropdown notification-list d-flex align-items-center justify-content-center ps-2 mt-2\" style={{borderLeft:'2px solid #E8EAE9'}}>\r\n                            <i className='mdi mdi-logout fs-3 cursor' title=\"Log Out\" style={{marginTop:'6px'}} onClick={() => navigate('/account/logout')}></i>\r\n                        </li>\r\n\r\n                    </ul>\r\n\r\n                    {/* toggle for vertical layout */}\r\n                    {(layoutType === layoutConstants.LAYOUT_VERTICAL || layoutType === layoutConstants.LAYOUT_FULL) && (\r\n                        <button className=\"button-menu-mobile open-left\" onClick={handleLeftMenuCallBack}>\r\n                            <i className=\"mdi mdi-menu\" />\r\n                        </button>\r\n                    )}\r\n\r\n                    {/* toggle for horizontal layout */}\r\n                    {layoutType === layoutConstants.LAYOUT_HORIZONTAL && (\r\n                        <Link\r\n                            to=\"#\"\r\n                            className={classNames('navbar-toggle', { open: isopen })}\r\n                            onClick={handleLeftMenuCallBack}>\r\n                            <div className=\"lines\">\r\n                                <span></span>\r\n                                <span></span>\r\n                                <span></span>\r\n                            </div>\r\n                        </Link>\r\n                    )}\r\n\r\n                    {/* toggle for detached layout */}\r\n                    {layoutType === layoutConstants.LAYOUT_DETACHED && (\r\n                        <Link to=\"#\" className=\"button-menu-mobile disable-btn\" onClick={handleLeftMenuCallBack}>\r\n                            <div className=\"lines\">\r\n                                <span></span>\r\n                                <span></span>\r\n                                <span></span>\r\n                            </div>\r\n                        </Link>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Topbar;\r\n","import addEventListener from './addEventListener';\nimport removeEventListener from './removeEventListener';\n\nfunction listen(node, eventName, handler, options) {\n  addEventListener(node, eventName, handler, options);\n  return function () {\n    removeEventListener(node, eventName, handler, options);\n  };\n}\n\nexport default listen;","import { createContext, useContext } from 'react';\nimport canUseDOM from 'dom-helpers/canUseDOM';\nconst Context = /*#__PURE__*/createContext(canUseDOM ? window : undefined);\nexport const WindowProvider = Context.Provider;\n\n/**\n * The document \"window\" placed in React context. Helpful for determining\n * SSR context, or when rendering into an iframe.\n *\n * @returns the current window\n */\nexport default function useWindow() {\n  return useContext(Context);\n}","/* eslint-disable no-bitwise, no-cond-assign */\n\n/**\n * Checks if an element contains another given element.\n * \n * @param context the context element\n * @param node the element to check\n */\nexport default function contains(context, node) {\n  // HTML DOM and SVG DOM may have different support levels,\n  // so we need to check on context instead of a document root element.\n  if (context.contains) return context.contains(node);\n  if (context.compareDocumentPosition) return context === node || !!(context.compareDocumentPosition(node) & 16);\n}","import { useRef, useEffect } from 'react';\n\n/**\n * Track whether a component is current mounted. Generally less preferable than\n * properlly canceling effects so they don't run after a component is unmounted,\n * but helpful in cases where that isn't feasible, such as a `Promise` resolution.\n *\n * @returns a function that returns the current isMounted state of the component\n *\n * ```ts\n * const [data, setData] = useState(null)\n * const isMounted = useMounted()\n *\n * useEffect(() => {\n *   fetchdata().then((newData) => {\n *      if (isMounted()) {\n *        setData(newData);\n *      }\n *   })\n * })\n * ```\n */\nexport default function useMounted() {\n  const mounted = useRef(true);\n  const isMounted = useRef(() => mounted.current);\n  useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n  return isMounted.current;\n}","import { useEffect, useLayoutEffect } from 'react';\nconst isReactNative = typeof global !== 'undefined' &&\n// @ts-ignore\nglobal.navigator &&\n// @ts-ignore\nglobal.navigator.product === 'ReactNative';\nconst isDOM = typeof document !== 'undefined';\n\n/**\n * Is `useLayoutEffect` in a DOM or React Native environment, otherwise resolves to useEffect\n * Only useful to avoid the console warning.\n *\n * PREFER `useEffect` UNLESS YOU KNOW WHAT YOU ARE DOING.\n *\n * @category effects\n */\nexport default isDOM || isReactNative ? useLayoutEffect : useEffect;","/* eslint-disable no-return-assign */\nimport canUseDOM from './canUseDOM';\nexport var optionsSupported = false;\nexport var onceSupported = false;\n\ntry {\n  var options = {\n    get passive() {\n      return optionsSupported = true;\n    },\n\n    get once() {\n      // eslint-disable-next-line no-multi-assign\n      return onceSupported = optionsSupported = true;\n    }\n\n  };\n\n  if (canUseDOM) {\n    window.addEventListener('test', options, options);\n    window.removeEventListener('test', options, true);\n  }\n} catch (e) {\n  /* */\n}\n\n/**\n * An `addEventListener` ponyfill, supports the `once` option\n * \n * @param node the element\n * @param eventName the event name\n * @param handle the handler\n * @param options event options\n */\nfunction addEventListener(node, eventName, handler, options) {\n  if (options && typeof options !== 'boolean' && !onceSupported) {\n    var once = options.once,\n        capture = options.capture;\n    var wrappedHandler = handler;\n\n    if (!onceSupported && once) {\n      wrappedHandler = handler.__once || function onceHandler(event) {\n        this.removeEventListener(eventName, onceHandler, capture);\n        handler.call(this, event);\n      };\n\n      handler.__once = wrappedHandler;\n    }\n\n    node.addEventListener(eventName, wrappedHandler, optionsSupported ? options : capture);\n  }\n\n  node.addEventListener(eventName, handler, options);\n}\n\nexport default addEventListener;","var toArray = Function.prototype.bind.call(Function.prototype.call, [].slice);\n/**\n * Runs `querySelectorAll` on a given element.\n * \n * @param element the element\n * @param selector the selector\n */\n\nexport default function qsa(element, selector) {\n  return toArray(element.querySelectorAll(selector));\n}","const _excluded = [\"as\", \"disabled\"];\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.indexOf(n) >= 0) continue; t[n] = r[n]; } return t; }\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\nexport function useButtonProps({\n  tagName,\n  disabled,\n  href,\n  target,\n  rel,\n  role,\n  onClick,\n  tabIndex = 0,\n  type\n}) {\n  if (!tagName) {\n    if (href != null || target != null || rel != null) {\n      tagName = 'a';\n    } else {\n      tagName = 'button';\n    }\n  }\n  const meta = {\n    tagName\n  };\n  if (tagName === 'button') {\n    return [{\n      type: type || 'button',\n      disabled\n    }, meta];\n  }\n  const handleClick = event => {\n    if (disabled || tagName === 'a' && isTrivialHref(href)) {\n      event.preventDefault();\n    }\n    if (disabled) {\n      event.stopPropagation();\n      return;\n    }\n    onClick == null ? void 0 : onClick(event);\n  };\n  const handleKeyDown = event => {\n    if (event.key === ' ') {\n      event.preventDefault();\n      handleClick(event);\n    }\n  };\n  if (tagName === 'a') {\n    // Ensure there's a href so Enter can trigger anchor button.\n    href || (href = '#');\n    if (disabled) {\n      href = undefined;\n    }\n  }\n  return [{\n    role: role != null ? role : 'button',\n    // explicitly undefined so that it overrides the props disabled in a spread\n    // e.g. <Tag {...props} {...hookProps} />\n    disabled: undefined,\n    tabIndex: disabled ? undefined : tabIndex,\n    href,\n    target: tagName === 'a' ? target : undefined,\n    'aria-disabled': !disabled ? undefined : disabled,\n    rel: tagName === 'a' ? rel : undefined,\n    onClick: handleClick,\n    onKeyDown: handleKeyDown\n  }, meta];\n}\nconst Button = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n      as: asProp,\n      disabled\n    } = _ref,\n    props = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const [buttonProps, {\n    tagName: Component\n  }] = useButtonProps(Object.assign({\n    tagName: asProp,\n    disabled\n  }, props));\n  return /*#__PURE__*/_jsx(Component, Object.assign({}, props, buttonProps, {\n    ref: ref\n  }));\n});\nButton.displayName = 'Button';\nexport default Button;","import { useEffect, useRef } from 'react';\n\n/**\n * Store the last of some value. Tracked via a `Ref` only updating it\n * after the component renders.\n *\n * Helpful if you need to compare a prop value to it's previous value during render.\n *\n * ```ts\n * function Component(props) {\n *   const lastProps = usePrevious(props)\n *\n *   if (lastProps.foo !== props.foo)\n *     resetValueFromProps(props.foo)\n * }\n * ```\n *\n * @param value the value to track\n */\nexport default function usePrevious(value) {\n  const ref = useRef(null);\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}","export const ATTRIBUTE_PREFIX = `data-rr-ui-`;\nexport const PROPERTY_PREFIX = `rrUi`;\nexport function dataAttr(property) {\n  return `${ATTRIBUTE_PREFIX}${property}`;\n}\nexport function dataProp(property) {\n  return `${PROPERTY_PREFIX}${property}`;\n}","import { useEffect, useRef } from 'react';\n\n/**\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\n * value is the one rendered with. Generally only required for Concurrent mode usage\n * where previous work in `render()` may be discarded before being used.\n *\n * This is safe to access in an event handler.\n *\n * @param value The `Ref` value\n */\nfunction useCommittedRef(value) {\n  const ref = useRef(value);\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\nexport default useCommittedRef;","import { useEffect, useRef } from 'react';\n\n/**\n * Creates a `Ref` whose value is updated in an effect, ensuring the most recent\n * value is the one rendered with. Generally only required for Concurrent mode usage\n * where previous work in `render()` may be discarded before being used.\n *\n * This is safe to access in an event handler.\n *\n * @param value The `Ref` value\n */\nfunction useCommittedRef(value) {\n  const ref = useRef(value);\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref;\n}\nexport default useCommittedRef;","import { useCallback } from 'react';\nimport useCommittedRef from './useCommittedRef';\nexport default function useEventCallback(fn) {\n  const ref = useCommittedRef(fn);\n  return useCallback(function (...args) {\n    return ref.current && ref.current(...args);\n  }, [ref]);\n}","import { useState } from 'react';\nimport useEffect from './useIsomorphicEffect';\nconst targetMap = new WeakMap();\nlet resizeObserver;\nfunction getResizeObserver() {\n  // eslint-disable-next-line no-return-assign\n  return resizeObserver = resizeObserver || new window.ResizeObserver(entries => {\n    entries.forEach(entry => {\n      const handler = targetMap.get(entry.target);\n      if (handler) handler(entry.contentRect);\n    });\n  });\n}\n\n/**\n * Efficiently observe size changes on an element. Depends on the `ResizeObserver` api,\n * and polyfills are needed in older browsers.\n *\n * ```ts\n * const [ref, attachRef] = useCallbackRef(null);\n *\n * const rect = useResizeObserver(ref);\n *\n * return (\n *  <div ref={attachRef}>\n *    {JSON.stringify(rect)}\n *  </div>\n * )\n * ```\n *\n * @param element The DOM element to observe\n */\nexport default function useResizeObserver(element) {\n  const [rect, setRect] = useState(null);\n  useEffect(() => {\n    if (!element) return;\n    getResizeObserver().observe(element);\n    setRect(element.getBoundingClientRect());\n    targetMap.set(element, rect => {\n      setRect(rect);\n    });\n    return () => {\n      targetMap.delete(element);\n    };\n  }, [element]);\n  return rect;\n}","const _excluded = [\"onKeyDown\"];\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.indexOf(n) >= 0) continue; t[n] = r[n]; } return t; }\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/anchor-has-content */\n\nimport * as React from 'react';\nimport { useEventCallback } from '@restart/hooks';\nimport { useButtonProps } from './Button';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\n/**\n * An generic `<a>` component that covers a few A11y cases, ensuring that\n * cases where the `href` is missing or trivial like \"#\" are treated like buttons.\n */\nconst Anchor = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n      onKeyDown\n    } = _ref,\n    props = _objectWithoutPropertiesLoose(_ref, _excluded);\n  const [buttonProps] = useButtonProps(Object.assign({\n    tagName: 'a'\n  }, props));\n  const handleKeyDown = useEventCallback(e => {\n    buttonProps.onKeyDown(e);\n    onKeyDown == null ? void 0 : onKeyDown(e);\n  });\n  if (isTrivialHref(props.href) || props.role === 'button') {\n    return /*#__PURE__*/_jsx(\"a\", Object.assign({\n      ref: ref\n    }, props, buttonProps, {\n      onKeyDown: handleKeyDown\n    }));\n  }\n  return /*#__PURE__*/_jsx(\"a\", Object.assign({\n    ref: ref\n  }, props, {\n    onKeyDown: onKeyDown\n  }));\n});\nAnchor.displayName = 'Anchor';\nexport default Anchor;","/**\n * A `removeEventListener` ponyfill\n * \n * @param node the element\n * @param eventName the event name\n * @param handle the handler\n * @param options event options\n */\nfunction removeEventListener(node, eventName, handler, options) {\n  var capture = options && typeof options !== 'boolean' ? options.capture : options;\n  node.removeEventListener(eventName, handler, capture);\n\n  if (handler.__once) {\n    node.removeEventListener(eventName, handler.__once, capture);\n  }\n}\n\nexport default removeEventListener;","export default !!(typeof window !== 'undefined' && window.document && window.document.createElement);","import { useMemo } from 'react';\nconst toFnRef = ref => !ref || typeof ref === 'function' ? ref : value => {\n  ref.current = value;\n};\nexport function mergeRefs(refA, refB) {\n  const a = toFnRef(refA);\n  const b = toFnRef(refB);\n  return value => {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\nfunction useMergedRefs(refA, refB) {\n  return useMemo(() => mergeRefs(refA, refB), [refA, refB]);\n}\nexport default useMergedRefs;","import { useState } from 'react';\n\n/**\n * A convenience hook around `useState` designed to be paired with\n * the component [callback ref](https://reactjs.org/docs/refs-and-the-dom.html#callback-refs) api.\n * Callback refs are useful over `useRef()` when you need to respond to the ref being set\n * instead of lazily accessing it in an effect.\n *\n * ```ts\n * const [element, attachRef] = useCallbackRef<HTMLDivElement>()\n *\n * useEffect(() => {\n *   if (!element) return\n *\n *   const calendar = new FullCalendar.Calendar(element)\n *\n *   return () => {\n *     calendar.destroy()\n *   }\n * }, [element])\n *\n * return <div ref={attachRef} />\n * ```\n *\n * @category refs\n */\nexport default function useCallbackRef() {\n  return useState(null);\n}","import { useCallback } from 'react';\nimport useCommittedRef from './useCommittedRef';\nexport default function useEventCallback(fn) {\n  const ref = useCommittedRef(fn);\n  return useCallback(function (...args) {\n    return ref.current && ref.current(...args);\n  }, [ref]);\n}","\"use client\";\n\nimport * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'InputGroupContext';\nexport default context;","import { useEffect } from 'react';\nimport useEventCallback from './useEventCallback';\n/**\n * Attaches an event handler outside directly to specified DOM element\n * bypassing the react synthetic event system.\n *\n * @param element The target to listen for events on\n * @param event The DOM event name\n * @param handler An event handler\n * @param capture Whether or not to listen during the capture event phase\n */\nexport default function useEventListener(eventTarget, event, listener, capture = false) {\n  const handler = useEventCallback(listener);\n  useEffect(() => {\n    const target = typeof eventTarget === 'function' ? eventTarget() : eventTarget;\n    target.addEventListener(event, handler, capture);\n    return () => target.removeEventListener(event, handler, capture);\n  }, [eventTarget]);\n}"],"names":["ownerDocument","node","document","notificationContainerStyle","maxHeight","display","notificationShowContainerStyle","NotificationDropdown","props","state","dropdownOpen","setDropdownOpen","useState","notificationContentStyle","setNotificationContentStyles","toggleDropdown","_jsxs","Dropdown","show","onToggle","children","Toggle","variant","id","as","Link","to","onClick","className","_jsx","Menu","align","SimpleBar","style","notifications","map","item","i","React","day","messages","message","index","Item","classNames","isRead","Card","Body","avatar","src","alt","icon","title","time","subText","toString","Notifications","_ref","hideLogo","navCssClasses","openLeftMenuCallBack","topbarDark","dispatch","useDispatch","isopen","setIsopen","navigate","useNavigate","navbarCssClasses","containerCssClasses","layoutType","leftSideBarType","useSelector","Layout","handleLeftMenuCallBack","prevState","layoutConstants","window","innerWidth","changeSidebarType","body","classList","toggle","_Fragment","Logo","height","borderLeft","marginTop","open","eventName","handler","options","addEventListener","removeEventListener","Context","createContext","canUseDOM","undefined","Provider","useWindow","useContext","contains","context","compareDocumentPosition","useMounted","mounted","useRef","isMounted","current","useEffect","isReactNative","global","navigator","product","useLayoutEffect","optionsSupported","onceSupported","passive","once","e","capture","wrappedHandler","__once","onceHandler","event","this","call","toArray","Function","prototype","bind","slice","qsa","element","selector","querySelectorAll","_excluded","useButtonProps","_ref2","tagName","disabled","href","target","rel","role","tabIndex","type","meta","handleClick","trim","isTrivialHref","preventDefault","stopPropagation","onKeyDown","key","Button","ref","asProp","r","t","n","hasOwnProperty","indexOf","_objectWithoutPropertiesLoose","buttonProps","Component","Object","assign","displayName","usePrevious","value","ATTRIBUTE_PREFIX","dataAttr","property","useEventCallback","fn","useCommittedRef","useCallback","arguments","WeakMap","Anchor","handleKeyDown","createElement","toFnRef","refA","refB","useMemo","a","b","mergeRefs","useCallbackRef","useEventListener","eventTarget","listener","length"],"sourceRoot":""}