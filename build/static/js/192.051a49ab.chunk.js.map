{"version":3,"file":"static/js/192.051a49ab.chunk.js","mappings":"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","sources":["pages/shivay/user/modal/AddUserModal.js","pages/shivay/user/User.js","helpers/Pagination.js","helpers/PageTitle.js","helpers/loader/Loading.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Modal, Button, Row, Col, Form, InputGroup } from 'react-bootstrap';\nimport Select from 'react-select';\nimport { createUsersActions, getLocationActions, getWarehouseActions, updateUsersActions } from '../../../../redux/actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { FiEye, FiEyeOff } from 'react-icons/fi';\nimport { Controller } from \"react-hook-form\";\nimport InputGroupText from 'react-bootstrap/esm/InputGroupText';\n\nconst AddUserModal = ({ showModal, handleClose, UserData }) => {\n\n    const { type } = UserData;\n    const dispatch = useDispatch();\n    const {\n        handleSubmit,\n        register,\n        control,\n        setValue,\n        reset,\n        formState: { errors },\n    } = useForm();\n\n    const [selectedWarehouse, setSelectedWarehouse] = useState([]);\n    const [locationSelected, setLocationSelected] = useState(null);\n    // console.log(selectedWarehouse, 'selectedWarehouseselectedWarehouse')\n    const { location } = useSelector((state) => state?.locationReducer || {});\n    const locationData = location?.response || [];\n    const WarehouseData = useSelector((state) => state?.getWarehouseReducer?.warehouseList?.response || []);\n\n    useEffect(() => {\n        dispatch(getLocationActions());\n        dispatch(getWarehouseActions({\n            limit: '',\n            page: '',\n            search: '',\n            stockFilter: true,\n        }));\n    }, [dispatch]);\n\n    const closeModal = () => {\n        reset();\n        handleClose();\n        setSelectedWarehouse(null);\n        setLocationSelected(null);\n    }\n\n    const [showPassword, setShowPassword] = useState(false);\n\n    const togglePasswordVisibility = () => {\n        setShowPassword(prev => !prev);\n    };\n\n    useEffect(() => {\n\n        if (UserData?.data) {\n            const updateWarehouses = UserData?.data?.warehouseData?.map((data) => (\n                {\n                    value: data?._id, label: data?.name\n                }\n            ))\n            setSelectedWarehouse(updateWarehouses)\n\n            setValue('name', UserData.data?.name)\n            setValue('email', UserData.data?.email)\n            setValue('password', UserData.data?.password)\n            setValue('phoneNumber', UserData.data?.phoneNumber)\n            setValue('address', UserData.data?.address)\n\n            setLocationSelected({\n                label: UserData?.data?.location,\n                value: UserData?.data?.location,\n            });\n        }\n    }, [UserData]);\n\n    const onSubmit = (data) => {\n        const payload = {\n            name: data?.name,\n            email: data?.email,\n            password: data?.password,\n            phoneNumber: String(data?.phoneNumber || ''),\n            address: data?.address || '',\n            location: locationSelected ? locationSelected.value : '',\n            warehouseIds: selectedWarehouse?.map((item) => item.value),\n        };\n        if (UserData?.data?._id) {\n            const updatedData = {\n                ...payload,\n                userId: UserData?.data?._id,\n            };\n            dispatch(updateUsersActions(updatedData));\n        } else {\n            dispatch(createUsersActions(payload));\n        }\n        // console.log(payload,'payload')\n        closeModal();\n    };\n\n    return (\n        <Modal show={showModal} centered size='lg' onHide={handleClose} backdrop=\"static\" keyboard={false}>\n            <Form onSubmit={handleSubmit(onSubmit)}>\n                <Modal.Header closeButton>\n                    <Modal.Title className='text-black'>{type} User</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Row>\n                        <Col sm={6}>\n                            <Form.Group className=\"mb-1\">\n                                <Form.Label className=\"mb-0\">Warehouse {!UserData?.data && <span className=\"text-danger\">*</span>}\n                                </Form.Label>\n                                <Select\n                                    value={selectedWarehouse}\n                                    onChange={(selectedOption) => setSelectedWarehouse(selectedOption)}\n                                    options={WarehouseData?.map((data) => ({\n                                        label: data.name,\n                                        value: data._id,\n                                    }))}\n                                    placeholder=\"Select warehouse\"\n                                    isClearable\n                                    isMulti\n                                    required\n                                />\n\n                                {errors.warehouse && (\n                                    <small className=\"text-danger\">{errors.warehouse.message}</small>\n                                )}\n                            </Form.Group>\n\n                        </Col>\n                        <Col sm={6}>\n                            <Form.Group className=\"mb-1\">\n                                <Form.Label className='mb-0'>User Name {!UserData?.data && <span className=\"text-danger\">*</span>}\n                                </Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    placeholder=\"Enter User Name\"\n                                    {...register(\"name\", {\n                                        required: \"User Name is required\",\n                                        validate: (value) => {\n                                            const trimmed = value.trim();\n                                            if (trimmed === \"\") return \"User Name cannot be empty or spaces only\";\n                                            if (/\\d/.test(trimmed)) return \"User Name should not contain numbers\";\n                                            return true;\n                                        }\n                                    })}\n                                />\n                                {errors.name && <small className=\"text-danger\">{errors.name.message}</small>}\n                            </Form.Group>\n\n                        </Col>\n                        <Col sm={6}>\n                            <Form.Group className=\"mb-1\">\n                                <Form.Label className='mb-0'>Email Id {!UserData?.data && <span className=\"text-danger\">*</span>}\n                                </Form.Label>\n                                <Form.Control\n                                    type=\"email\"\n                                    placeholder=\"Enter Email Id\"\n                                    {...register(\"email\", { required: true })}\n                                />\n                                {errors.email && <small className=\"text-danger\">Email is required</small>}\n                            </Form.Group>\n                        </Col>\n                        <Col sm={6}>\n                            <Form.Group className=\"mb-1 position-relative\">\n                                <Form.Label className='mb-0'>Password {!UserData?.data && <span className=\"text-danger\">*</span>}\n                                </Form.Label>\n                                <div className=\"position-relative\">\n                                    <Form.Control\n                                        type={showPassword ? \"text\" : \"password\"}\n                                        placeholder=\"Enter Password\"\n                                        {...register(\"password\", {\n                                            required: \"Password is required\",\n                                            minLength: {\n                                                value: 8,\n                                                message: \"Minimum 8 characters\"\n                                            },\n                                            pattern: {\n                                                value: /^(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n                                                message: \"Must include uppercase, number, and special character\"\n                                            }\n                                        })}\n                                    />\n                                    <span\n                                        onClick={togglePasswordVisibility}\n                                        className=\"position-absolute end-0 top-50 translate-middle-y me-2\"\n                                        style={{ cursor: 'pointer' }}\n                                    >\n                                        {showPassword ? <FiEyeOff /> : <FiEye />}\n                                    </span>\n                                </div>\n                                {errors.password && (\n                                    <small className=\"text-danger\">{errors.password.message}</small>\n                                )}\n                            </Form.Group>\n                        </Col>\n                        <Col sm={6}>\n                            <Form.Group className=\"mb-1\">\n                                <Form.Label className='mb-0'>Phone Number {!UserData?.data && <span className=\"text-danger\">*</span>}\n                                </Form.Label>\n\n                                <InputGroup>\n                                    <InputGroupText>+91</InputGroupText>\n                                    <Form.Control\n                                        type=\"text\"\n                                        placeholder=\"Enter Phone Number\"\n                                        maxLength={10}\n                                        onInput={(e) => {\n                                            e.target.value = e.target.value.replace(/\\D/g, '').slice(0, 10);\n                                        }}\n                                        {...register(\"phoneNumber\", {\n                                            required: \"Phone number is required\",\n                                            pattern: {\n                                                value: /^[0-9]{10}$/,\n                                                message: \"Phone number must be exactly 10 digits\"\n                                            }\n                                        })}\n                                    />\n                                </InputGroup>\n                                {errors.phoneNumber && (\n                                    <small className=\"text-danger\">{errors.phoneNumber.message}</small>\n                                )}\n                            </Form.Group>\n                        </Col>\n                        <Col sm={6}>\n                            <Form.Group className=\"mb-1\">\n                                <Form.Label className=\"mb-0\">Location</Form.Label>\n                                <Select\n                                    options={locationData?.map((loc) => ({\n                                        label: loc.name,\n                                        value: loc.name,\n                                    }))}\n                                    placeholder=\"Select Location\"\n                                    onChange={(selectedOption) => {\n                                        console.log(selectedOption, 'gfxdcghbjk')\n                                        setLocationSelected(selectedOption);\n                                        setValue('location', selectedOption?.value);\n                                    }}\n                                    value={locationSelected}\n                                    isSearchable\n                                />\n                            </Form.Group>\n                        </Col>\n\n                        <Col sm={12}>\n                            <Form.Group className=\"mb-1\">\n                                <Form.Label className='mb-0'>Full Address</Form.Label>\n                                <Form.Control\n                                    as=\"textarea\"\n                                    rows={3}\n                                    placeholder=\"Enter Full Address\"\n                                    {...register(\"address\")}\n                                />\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button className='cancel-button' onClick={closeModal}>\n                        Close\n                    </Button>\n                    <Button className='custom-button' type='submit'>\n                        {type === 'Add' ? 'Save' : 'Update'}\n                    </Button>\n                </Modal.Footer>\n            </Form>\n        </Modal>\n    );\n};\n\nexport default AddUserModal;\n","import React, { useEffect, useState } from 'react'\nimport { Button, Card, Col, Form, Modal, Row } from 'react-bootstrap'\nimport { IoIosAdd } from \"react-icons/io\";\nimport PageTitle from '../../../helpers/PageTitle';\nimport { AiOutlineEdit } from \"react-icons/ai\";\nimport AddUserModal from './modal/AddUserModal';\nimport { RiDeleteBinLine } from \"react-icons/ri\";\nimport { deleteUsersActions, getUsersListActions, UsersStateEmptyActions } from '../../../redux/actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { MdDeleteOutline } from 'react-icons/md';\nimport Pagination from '../../../helpers/Pagination';\nimport { Loading } from '../../../helpers/loader/Loading';\n\nconst User = () => {\n\n    const dispatch = useDispatch();\n    const [showConfirm, setShowConfirm] = useState(false);\n    const [userToDelete, setUserToDelete] = useState(null);\n    const [search, setSearch] = useState('')\n    const totalRecords = '0';\n    const [pageIndex, setPageIndex] = useState(1);\n    const [pageSize, setPageSize] = useState(10);\n    const [totalPages, setTotalPages] = useState(Math.ceil(totalRecords / pageSize));\n    const store = useSelector((state) => state)\n\n    const UserData = store?.userListReducer?.userList?.response;\n    const createResponse = store?.createUsersReducer?.createUsers?.status;\n    const updateResponse = store?.updateUsersReducer?.updateUsers?.status;\n    const deleteResponse = store?.deleteUsersReducer?.deleteUsers?.status;\n\n    useEffect(() => {\n        dispatch(getUsersListActions({\n            limit: pageSize,\n            page: pageIndex,\n            search: search,\n            stockFilter: true,\n        }));\n    }, [dispatch, search, pageSize, pageIndex]);\n\n    useEffect(() => {\n        if (createResponse === 200 || deleteResponse === 200 || updateResponse === 200) {\n            dispatch(getUsersListActions({\n                limit: pageSize,\n                page: pageIndex,\n                search: search,\n                stockFilter: true,\n            }));\n        }\n    }, [createResponse, deleteResponse, updateResponse]);\n\n    const handleDelete = () => {\n        dispatch(deleteUsersActions({ userId: userToDelete }));\n        dispatch(UsersStateEmptyActions())\n        setShowConfirm(false);\n    };\n\n    const [showUserModal, setShowUserModal] = useState({\n        data: null,\n        type: null,\n        status: false\n    })\n\n    useEffect(() => {\n        setTotalPages(Math.ceil(totalRecords / pageSize));\n    },\n        [totalRecords, pageSize]);\n\n    const handleUserModal = (usersDetails, modalType, modalStatus) => {\n        setShowUserModal({ ...showUserModal, data: usersDetails, type: modalType, status: modalStatus })\n    }\n    const handleClose = () => {\n        setShowUserModal({ ...showUserModal, data: null, status: false })\n    }\n    return (\n        <div>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: \"SHIVAY User List\", path: \"/shivay/user\" },\n                    { label: \"User List\", path: \"/shivay/user\", active: true },\n                ]}\n                title={\"User List\"}\n            />\n            <Form>\n                <Row>\n                    <Col sm={12}>\n                        <div className='d-flex justify-content-end mt-1'>\n                            <input\n                                type=\"text\"\n                                className=\"form-control w-auto me-2\"\n                                style={{ height: '42px', marginTop: '10px' }}\n                                placeholder=\"Search...\"\n                                value={search}\n                                onChange={(e) => setSearch(e.target.value)}\n                            />\n                            <Button className=\"mt-2 fw-bold custom-button\" onClick={() => handleUserModal(null, 'Add', true)}>\n                                <IoIosAdd className=\"fs-3\" />&nbsp;User\n                            </Button>\n                        </div>\n                    </Col>\n\n                    <div className='mt-2'>\n                        <Card\n                            style={{ boxShadow: 'rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px, rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset' }}\n                        >\n                            <Card.Body className=\"text-center py-1\">\n                                <table className=\"table table-striped bg-white mb-0\">\n                                    <thead>\n                                        <tr className=\"table_header\">\n                                            <th scope=\"col\"><i className=\"mdi mdi-merge\"></i></th>\n                                            <th scope=\"col\">User Name</th>\n                                            <th scope=\"col\">Email Id</th>\n                                            <th scope=\"col\">Password</th>\n                                            {/* <th scope=\"col\">Action</th> */}\n                                        </tr>\n                                    </thead>\n                                    {store?.userListReducer?.loading ? (\n                                        <tr>\n                                            <td className='text-center' colSpan={6}>\n                                                <Loading />\n                                            </td>\n                                        </tr>\n                                    ) : (\n                                        <tbody>\n                                            {UserData?.length === 0 ? (\n                                                <tr>\n                                                    <td colSpan={6} className='text-center'>\n                                                        <p className='my-5 py-5 '>No User Found.</p>\n                                                    </td>\n                                                </tr>\n                                            ) : (\n                                                UserData?.map((data, index) => (\n                                                    <tr key={index} className=\"text-dark fw-bold text-nowrap highlight-row\">\n                                                        <th scope=\"row\">{index + 1}</th>\n                                                        <td className=\"text-uppercase fw-bold \">\n                                                            {data?.name || <span className=\"text-black\">-</span>}\n                                                        </td>\n                                                        <td className=\"fw-bold\">\n                                                            {data?.email || <span className=\"text-black\">-</span>}\n                                                        </td>\n                                                        <td className=\" fw-bold\">\n                                                            {data?.password || <span className=\"text-black\">-</span>}\n                                                        </td>\n                                                        <td></td>\n                                                        <div className=\"icon-container d-flex pb-0\" >\n                                                            <span className=\"icon-wrapper\" title=\"Edit\">\n                                                                <AiOutlineEdit\n                                                                    className=\"fs-4 text-black\"\n                                                                    style={{ cursor: 'pointer' }}\n                                                                    onClick={() => handleUserModal(data, 'Edit', true)}\n                                                                />\n                                                            </span>\n                                                            <span className=\"icon-wrapper\" title=\"Delete\" onClick={() => { setUserToDelete(data?._id); setShowConfirm(true); }}>\n                                                                <RiDeleteBinLine className=\"fs-4 text-black\" style={{ cursor: 'pointer' }} />\n                                                            </span>\n                                                        </div>\n                                                    </tr>\n                                                )))}\n                                        </tbody>\n                                    )}\n                                </table>\n                                <Pagination\n                                    pageIndex={pageIndex}\n                                    pageSize={pageSize}\n                                    totalPages={store?.userListReducer?.userList?.totalPages}\n                                    setPageIndex={setPageIndex}\n                                    onChangePageSize={setPageSize}\n                                />\n                            </Card.Body>\n                        </Card>\n                    </div>\n                </Row>\n            </Form>\n\n            <AddUserModal showModal={showUserModal?.status} handleClose={handleClose} UserData={showUserModal} />\n\n            {/* delete modal */}\n            <Modal show={showConfirm} onHide={() => setShowConfirm(false)} >\n                <Modal.Body className='text-center'>\n                    <h4 className='text-black'>Confirm Deletion</h4>\n                    <p className='mt-2 mb-3'> Are you sure you want to delete this User?</p>\n                    <span className='bg-light rounded-circle p-3 '>\n                        <MdDeleteOutline className='fs-1  text-danger' />\n                    </span>\n                    <div className='d-flex justify-content-center mt-3 gap-2'>\n                        <Button className='cancel-button' onClick={() => setShowConfirm(false)}>\n                            Cancel\n                        </Button>\n                        <Button className='custom-button' onClick={handleDelete}>\n                            Delete\n                        </Button>\n                    </div>\n                </Modal.Body>\n            </Modal>\n        </div>\n    )\n}\n\nexport default User","import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom'; // Assuming you are using React Router\r\n\r\nconst Pagination = ({ pageIndex, pageSize, totalPages, setPageIndex, onChangePageSize }) => {\r\n    useEffect(() => {\r\n        // Ensure pageIndex stays within bounds when totalPages changes\r\n        if (pageIndex > totalPages) {\r\n            setPageIndex(Math.max(1, totalPages)); // Keep in valid range\r\n        }\r\n    }, [pageIndex, totalPages, setPageIndex]);\r\n\r\n    return (\r\n        <div className=\"d-lg-flex align-items-center text-center pb-1 pt-2\">\r\n            {/* Page Size Selection */}\r\n            <div className=\"d-inline-block me-3\">\r\n                <label className=\"me-1\">Display :</label>\r\n                <select\r\n                    value={pageSize}\r\n                    onChange={(e) => {\r\n                        const newSize = Number(e.target.value);\r\n                        onChangePageSize(newSize);\r\n                        setPageIndex(1); // Reset to first page\r\n                    }}\r\n                    className=\"form-select d-inline-block w-auto\">\r\n                    {[10, 20, 50, 100].map((size) => (\r\n                        <option key={size} value={size}>{size}</option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n\r\n            {/* Page Info */}\r\n            <span className=\"me-3\">\r\n                Page <strong>{pageIndex} of {totalPages}</strong>\r\n            </span>\r\n\r\n            {/* Go to Page Input */}\r\n            <label>Go to page: </label>\r\n            <input\r\n                type=\"number\"\r\n                placeholder={`${pageIndex}`}\r\n                min=\"1\"\r\n                max={totalPages}\r\n                onChange={(e) => {\r\n                    const enteredPage = Number(e.target.value);\r\n                    if (enteredPage >= 1 && enteredPage <= totalPages) {\r\n                        setPageIndex(enteredPage);\r\n                    }\r\n                }}\r\n                className=\"form-control ms-1 d-inline-block\"\r\n                style={{ width: '80px' }}\r\n            />\r\n\r\n            {/* Pagination Controls */}\r\n            <ul className=\"pagination pagination-rounded d-inline-flex ms-auto align-item-center mb-0 pe-4\">\r\n                {/* Previous Button */}\r\n                {pageIndex > 1 && (\r\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex - 1)}>\r\n                        <Link to=\"#\" className=\"page-link\">Previous</Link>\r\n                    </li>\r\n                )}\r\n\r\n                {/* Page Number Buttons */}\r\n                {Array.from({ length: totalPages }).map((_, i) => {\r\n                    const page = i + 1; // Adjust index to start from 1\r\n                    const isCurrentPage = page === pageIndex;\r\n                    const isNearCurrent = page >= pageIndex - 1 && page <= pageIndex + 1;\r\n                    const isEdgePage = page === 1 || page === totalPages;\r\n\r\n                    if (totalPages <= 5 || isNearCurrent || isEdgePage) {\r\n                        return (\r\n                            <li key={page} className={`page-item ${isCurrentPage ? 'active' : ''}`}\r\n                                onClick={() => setPageIndex(page)}>\r\n                                <Link to=\"#\" className=\"page-link\">{page}</Link>\r\n                            </li>\r\n                        );\r\n                    } else if ((page === 2 && pageIndex >= 5) || (page === totalPages - 1 && pageIndex <= totalPages - 4)) {\r\n                        return <li key={page} className=\"page-ittotalPagesem disabled\"><Link to=\"#\" className=\"page-link px-0\">...</Link></li>;\r\n                    }\r\n\r\n                    return null;\r\n                })}\r\n\r\n                {/* Next Button */}\r\n                {pageIndex < totalPages && (\r\n                    <li className=\"page-item\" onClick={() => setPageIndex(pageIndex + 1)}>\r\n                        <Link to=\"#\" className=\"page-link\">Next</Link>\r\n                    </li>\r\n                )}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Pagination;\r\n","// @flow\r\nimport React from 'react';\r\nimport { Row, Col, Breadcrumb } from 'react-bootstrap';\r\n\r\ntype BreadcrumbItems = {\r\n    label: string,\r\n    path: string,\r\n    active?: boolean,\r\n};\r\n\r\ntype PageTitleProps = {\r\n    breadCrumbItems: Array<BreadcrumbItems>,\r\n    title: string,\r\n};\r\n\r\n/**\r\n * PageTitle\r\n */\r\nconst PageTitle = (props: PageTitleProps): React$Element<any> => {\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                <div className=\"page-title-box\">\r\n                    <div className=\"page-title-right\">\r\n                        <Breadcrumb listProps={{ className: 'm-0' }}>\r\n                            <Breadcrumb.Item href=\"/\" >Dashboard</Breadcrumb.Item>\r\n\r\n                            {props.breadCrumbItems.map((item, index) => {\r\n                                return item.active ? (\r\n                                    <Breadcrumb.Item active key={index} style={{ color: '#000' }}>\r\n                                        {item.label}\r\n                                    </Breadcrumb.Item>\r\n                                ) : (\r\n                                    <Breadcrumb.Item key={index} href={item.path} >\r\n                                        {item.label}\r\n                                    </Breadcrumb.Item>\r\n                                );\r\n                            })}\r\n                        </Breadcrumb>\r\n                    </div>\r\n                    <h4 className=\"page-title\" style={{ color: '#000' }}>{props.title}</h4>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n    );\r\n};\r\n\r\nexport default PageTitle;\r\n","import React from 'react';\r\nimport { ColorRing, ThreeDots } from 'react-loader-spinner';\r\nconst Loading = () => {\r\n    return (\r\n        <div style={{ height: '54vh', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n            <ThreeDots\r\n                color=\"#6655D9\"\r\n                strokeWidth=\"5\"\r\n                animationDuration=\"0.75\"\r\n                width=\"70\"\r\n                visible={true}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst DashboardLoading = () => {\r\n    return (\r\n        <div style={{ height: '30vh', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n            <ThreeDots\r\n                color=\"#6655D9\"\r\n                strokeWidth=\"5\"\r\n                animationDuration=\"0.75\"\r\n                width=\"70\"\r\n                visible={true}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst ButtonLoading = () => {\r\n    return (\r\n        // <div style={{ height: \"5vh\", display: 'flex', justifyContent: 'center', alignItems: 'center' }} >\r\n        <div className=\" d-flex justify-content-center align-items-center w-100\" style={{ height: '2vh' }}>\r\n            <ColorRing\r\n                visible={true}\r\n                height=\"25\"\r\n                width=\"25\"\r\n                ariaLabel=\"blocks-loading\"\r\n                wrapperStyle={{}}\r\n                wrapperClass=\"blocks-wrapper\"\r\n                colors={['#fff', '#fff', '#fff', '#fff', '#fff']}\r\n            />\r\n\r\n            {/* <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"visually-hidden\">Loading...</span>\r\n            </div> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst CartLoading = () => {\r\n    return (\r\n        // <div style={{ height: \"5vh\", display: 'flex', justifyContent: 'center', alignItems: 'center' }} >\r\n        <div className=\"p-0 d-flex justify-content-center align-items-center m-0\">\r\n            <ColorRing\r\n                visible={true}\r\n                height=\"32\"\r\n                width=\"32\"\r\n                ariaLabel=\"blocks-loading\"\r\n                wrapperStyle={{}}\r\n                wrapperClass=\"blocks-wrapper\"\r\n                colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\r\n            />\r\n\r\n            {/* <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"visually-hidden\">Loading...</span>\r\n            </div> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { Loading, ButtonLoading, CartLoading, DashboardLoading };\r\n"],"names":["_ref","showModal","handleClose","UserData","type","dispatch","useDispatch","handleSubmit","register","control","setValue","reset","formState","errors","useForm","selectedWarehouse","setSelectedWarehouse","useState","locationSelected","setLocationSelected","location","useSelector","state","locationReducer","locationData","response","WarehouseData","_state$getWarehouseRe","_state$getWarehouseRe2","getWarehouseReducer","warehouseList","useEffect","getLocationActions","getWarehouseActions","limit","page","search","stockFilter","closeModal","showPassword","setShowPassword","data","_UserData$data","_UserData$data$wareho","_UserData$data2","_UserData$data3","_UserData$data4","_UserData$data5","_UserData$data6","_UserData$data7","_UserData$data8","updateWarehouses","warehouseData","map","value","_id","label","name","email","password","phoneNumber","address","_jsx","Modal","show","centered","size","onHide","backdrop","keyboard","children","_jsxs","Form","onSubmit","_UserData$data9","payload","String","warehouseIds","item","_UserData$data10","updatedData","userId","updateUsersActions","createUsersActions","Header","closeButton","Title","className","Body","Row","Col","sm","Group","Label","Select","onChange","selectedOption","options","placeholder","isClearable","isMulti","required","warehouse","message","Control","validate","trimmed","trim","test","minLength","pattern","onClick","togglePasswordVisibility","prev","style","cursor","FiEyeOff","FiEye","InputGroup","InputGroupText","maxLength","onInput","e","target","replace","slice","loc","console","log","isSearchable","as","rows","Footer","Button","User","_store$userListReduce","_store$userListReduce2","_store$createUsersRed","_store$createUsersRed2","_store$updateUsersRed","_store$updateUsersRed2","_store$deleteUsersRed","_store$deleteUsersRed2","_store$userListReduce3","_store$userListReduce4","_store$userListReduce5","showConfirm","setShowConfirm","userToDelete","setUserToDelete","setSearch","pageIndex","setPageIndex","pageSize","setPageSize","totalPages","setTotalPages","Math","ceil","store","userListReducer","userList","createResponse","createUsersReducer","createUsers","status","updateResponse","updateUsersReducer","updateUsers","deleteResponse","deleteUsersReducer","deleteUsers","getUsersListActions","showUserModal","setShowUserModal","handleUserModal","usersDetails","modalType","modalStatus","PageTitle","breadCrumbItems","path","active","title","height","marginTop","IoIosAdd","Card","boxShadow","scope","loading","colSpan","Loading","length","index","AiOutlineEdit","RiDeleteBinLine","Pagination","onChangePageSize","AddUserModal","MdDeleteOutline","handleDelete","deleteUsersActions","UsersStateEmptyActions","max","newSize","Number","min","enteredPage","width","Link","to","Array","from","_","i","isCurrentPage","props","Breadcrumb","listProps","Item","href","color","display","justifyContent","alignItems","ThreeDots","strokeWidth","animationDuration","visible","DashboardLoading","ButtonLoading","ColorRing","ariaLabel","wrapperStyle","wrapperClass","colors"],"sourceRoot":""}