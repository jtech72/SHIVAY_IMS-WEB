{"version":3,"file":"static/js/72.df4cdc86.chunk.js","mappings":"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","sources":["pages/shivay/openingStock/addStock/AddOpeningStock.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport PageTitle from '../../../../helpers/PageTitle'\nimport { Button, Card, Col, Form, Row } from 'react-bootstrap'\nimport Select from 'react-select';\nimport { IoIosAdd } from 'react-icons/io';\nimport { AiOutlineEdit } from 'react-icons/ai';\nimport { RiDeleteBinLine } from 'react-icons/ri';\nimport AddProductModal from './AddProductModal';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createStockActions, getStockListActions, getWarehouseListActions } from '../../../../redux/actions';\nimport { useForm } from 'react-hook-form';\nimport { useSearchParams } from 'react-router-dom';\n\nconst AddOpeningStock = () => {\n\n    const dispatch = useDispatch();\n    const { handleSubmit, register, setValue } = useForm()\n    const [showModal, setShowModal] = useState(false);\n    const handleShow = () => setShowModal(true);\n    const handleClose = () => setShowModal(false);\n    const store = useSelector((state) => state)\n    const today = new Date().toISOString().split('T')[0];\n    const [searchParams] = useSearchParams();\n    const stockId = searchParams.get('Id');\n    const isEditMode = Boolean(stockId);\n    const OpeningStockData = store?.stockListReducer?.stockList?.response\n\n    const Warehouse = store?.getWarehouseListReducer?.searchWarehouse?.response;\n    const warehouseOptions = Warehouse?.map((warehouse) => ({\n        value: warehouse._id,\n        label: warehouse.name,\n    }));\n\n    const [openingProducts, setOpeningProducts] = useState([])\n    const [selectedStock, setSelectedStock] = useState(null);\n    console.log(openingProducts, 'openingProducts')\n    const [selectedWarehouse, setSelectedWarehouse] = useState(null);\n    const [isEditing, setIsEditing] = useState(false);\n    const [editedQuantity, setEditedQuantity] = useState(selectedStock?.quantity || '');\n    const inputRef = useRef(null);\n\n    const handleWarehouseChange = (selectedOption) => {\n        setSelectedWarehouse(selectedOption);\n    };\n\n    useEffect(() => {\n        dispatch(getWarehouseListActions());\n    }, [dispatch]);\n\n    useEffect(() => {\n\n        dispatch(getStockListActions({\n            limit: '',\n            page: '',\n            search: '',\n        }));\n    }, [dispatch]);\n\n    useEffect(() => {\n        if (stockId && OpeningStockData?.length > 0) {\n            const foundStock = OpeningStockData?.find(item => item._id === stockId);\n            setSelectedStock(foundStock);\n            console.log(foundStock, 'foundStock')\n        }\n    }, [stockId, OpeningStockData]);\n\n    const onSubmit = (data) => {\n        const cleanedProducts = openingProducts.map(({ product, ...rest }) => rest);\n\n        const payload = {\n            warehouseId: selectedWarehouse?.value,\n            productStock: cleanedProducts,\n            description: data?.description,\n            date: data?.date\n        };\n        dispatch(createStockActions(payload));\n        // console.log(payload, 'payload');\n    };\n\n    const handleDeleteProduct = (indexToRemove) => {\n        const updatedProducts = openingProducts.filter((_, index) => index !== indexToRemove);\n        setOpeningProducts(updatedProducts);\n    };\n\n    useEffect(() => {\n\n        if (selectedStock) {\n            const updateWarehouses = selectedStock?.warehouseData\n                ? [{ value: selectedStock.warehouseData._id, label: selectedStock.warehouseData.name }]\n                : [];\n\n            setSelectedWarehouse(updateWarehouses)\n\n            setValue('date', selectedStock?.date)\n            setValue('description', selectedStock?.description)\n        }\n    }, [selectedStock]);\n    console.log(selectedStock, 'selectedStock')\n\n    const handleEditClick = () => {\n        setIsEditing(true);\n    };\n\n    // Handle input change\n    const handleQuantityChange = (e) => {\n        setEditedQuantity(e.target.value);\n    };\n\n    // Handle save (when clicking outside or pressing Enter)\n    const handleSave = () => {\n        setIsEditing(false);\n        // Here you would typically also call an API to update the quantity in your backend\n    };\n\n    // Handle key press (for Enter key)\n    const handleKeyPress = (e) => {\n        if (e.key === 'Enter') {\n            handleSave();\n        }\n    };\n\n    // Close the input when clicking outside\n    useEffect(() => {\n        const handleClickOutside = (e) => {\n            if (inputRef.current && !inputRef.current.contains(e.target)) {\n                handleSave();\n            }\n        };\n\n        if (isEditing) {\n            document.addEventListener('mousedown', handleClickOutside);\n            return () => {\n                document.removeEventListener('mousedown', handleClickOutside);\n            };\n        }\n    }, [isEditing]);\n\n    return (\n        <div>\n            <PageTitle\n                breadCrumbItems={[\n                    { label: \"SHIVAY Opening Stock List\", path: \"/shivay/openingStock\" },\n                    { label: isEditMode ? \"Edit Opening Stock\" : \"Add Opening Stock\", path: \"/shivay/openingStock\", active: true },\n                ]}\n                title={isEditMode ? \"Edit Opening Stock\" : \"Add Opening Stock\"}\n            />\n\n\n            <Form onSubmit={handleSubmit(onSubmit)}>\n                <Row>\n                    <Col sm={3}>\n                        <Form.Group className=\"mb-1\">\n                            <Form.Label className='mb-0'>Warehouse</Form.Label>\n                            <Select\n                                value={selectedWarehouse}\n                                onChange={handleWarehouseChange}\n                                options={warehouseOptions}\n                                placeholder=\"Select a warehouse\"\n                                isClearable\n                                required\n                            />\n                        </Form.Group>\n                    </Col>\n                    <Col sm={3}>\n                        <Form.Group className=\"mb-1\">\n                            <Form.Label className='mb-0'>Date Range</Form.Label>\n                            <Form.Control\n                                type=\"date\"\n                                value={!stockId ? today : ''}\n                                {...register('date', { required: true })}\n                                required\n                            />\n                        </Form.Group>\n                    </Col>\n\n                    <Col sm={3}>\n                        <Form.Group className=\"mb-1\">\n                            <Form.Label className='mb-0'>Description</Form.Label>\n                            <Form.Control\n                                as='textarea'\n                                rows={1}\n                                {...register('description', { required: true })}\n                                placeholder='Enter Description'\n                            />\n                        </Form.Group>\n                    </Col>\n                    <Col sm={3} className='text-end mt-1'>\n                        {!isEditMode && <Button className=\"mt-2 fw-bold custom-button\"\n                            onClick={handleShow}\n                        >\n                            <IoIosAdd className=\"fs-3\" />&nbsp;Product\n                        </Button>}\n                    </Col>\n                </Row>\n\n                <div className='mt-2'>\n                    <Card\n                        style={{ boxShadow: 'rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px, rgba(10, 37, 64, 0.35) 0px -2px 6px 0px inset' }}\n                    >\n                        <Card.Body className=\"text-center py-1\">\n                            <table className=\"table table-striped bg-white\">\n                                <thead>\n                                    <tr className=\"table_header\">\n                                        <th scope=\"col\"><i className=\"mdi mdi-merge\"></i></th>\n                                        <th scope=\"col\">Product Name</th>\n                                        <th scope=\"col\">Code</th>\n                                        <th scope=\"col\">Quantity</th>\n\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {stockId ?\n                                        <>{[selectedStock] && [selectedStock]?.length > 0 ? (\n                                            [selectedStock]?.map((data, index) => (\n                                                <tr key={index} className=\"text-dark fw-bold text-nowrap highlight-row\">\n                                                    <th scope=\"row\">{index + 1}</th>\n                                                    <td className=\"text-uppercase fw-bold\">\n                                                        {data?.productData?.name || <span className=\"text-black\">-</span>}\n                                                    </td>\n                                                    <td className=\"fw-bold\">\n                                                        {data?.productData?.code || <span className=\"text-black\">-</span>}\n                                                    </td>\n                                                    <td className=\"fw-bold px-0 pb-0\">\n                                                        {isEditing ? (\n                                                            <input\n                                                                ref={inputRef}\n                                                                type=\"number\"  // or \"text\" depending on your needs\n                                                                value={editedQuantity}\n                                                                onChange={handleQuantityChange}\n                                                                onKeyPress={handleKeyPress}\n                                                                // autoFocus\n                                                                className=\"form-control form-control-md\"\n                                                                style={{ width: '5vw', display: 'inline-block', marginTop: '-10px' }}\n                                                            />\n                                                        ) : (\n                                                            <span onClick={handleEditClick} >{editedQuantity}</span> || <span className=\"text-black\">-</span>\n                                                        )}\n                                                    </td>\n\n                                                    <div className=\"icon-container d-flex pb-0\">\n                                                        <span\n                                                            className=\"icon-wrapper me-4\"\n                                                            title=\"Edit\"\n                                                            onClick={handleEditClick}\n                                                        >\n                                                            <AiOutlineEdit className=\"fs-4 text-black\" style={{ cursor: 'pointer' }} />\n                                                        </span>\n                                                    </div>\n                                                </tr>\n                                            ))\n                                        ) : (\n                                            <tr>\n                                                <td colSpan=\"6\" className=\"text-center text-muted py-3\">\n                                                    No products added yet. Please add products to add opening stock.\n                                                </td>\n                                            </tr>\n                                        )}</>\n                                        : <>\n                                            {openingProducts && openingProducts.length > 0 ? (\n                                                openingProducts?.map((data, index) => (\n                                                    <tr key={index} className=\"text-dark fw-bold text-nowrap highlight-row\">\n                                                        <th scope=\"row\">{index + 1}</th>\n                                                        <td className=\"text-uppercase fw-bold\">\n                                                            {data?.product?.name || <span className=\"text-black\">-</span>}\n                                                        </td>\n                                                        <td className=\"fw-bold\">\n                                                            {data?.product?.code || <span className=\"text-black\">-</span>}\n                                                        </td>\n                                                        <td className=\"fw-bold\">\n                                                            {data?.quantity || <span className=\"text-black\">-</span>}\n                                                        </td>\n\n                                                        <div className=\"icon-container d-flex pb-0\">\n                                                            <span className=\"icon-wrapper\" title=\"Edit\">\n                                                                <AiOutlineEdit className=\"fs-4 text-black\" style={{ cursor: 'pointer' }} />\n                                                            </span>\n                                                            <span className=\"icon-wrapper\" title=\"Delete\" onClick={() => handleDeleteProduct(index)}>\n                                                                <RiDeleteBinLine className=\"fs-4 text-black\" style={{ cursor: 'pointer' }} />\n                                                            </span>\n                                                        </div>\n                                                    </tr>\n                                                ))\n                                            ) : (\n                                                <tr>\n                                                    <td colSpan=\"6\" className=\"text-center text-muted py-3\">\n                                                        No products added yet. Please add products to add opening stock.\n                                                    </td>\n                                                </tr>\n                                            )}\n                                        </>\n                                    }\n                                </tbody>\n                            </table>\n\n                        </Card.Body>\n                    </Card>\n                    <div className=\"text-end\">\n                        <Button\n                            className=\"fw-bold cancel-button me-2\"\n                        >\n                            Cancel\n                        </Button>\n                        <Button className=\"fw-bold custom-button\" type='submit'>\n                            {isEditMode ? \"Update\" : \"Submit\"}\n                        </Button>\n                    </div>\n                </div>\n            </Form>\n\n            <AddProductModal openingProducts={openingProducts} setOpeningProducts={setOpeningProducts} showModal={showModal} handleClose={handleClose} />\n\n        </div>\n    )\n}\n\nexport default AddOpeningStock"],"names":["AddOpeningStock","_store$stockListReduc","_store$stockListReduc2","_store$getWarehouseLi","_store$getWarehouseLi2","_ref2","_ref3","dispatch","useDispatch","handleSubmit","register","setValue","useForm","showModal","setShowModal","useState","store","useSelector","state","today","Date","toISOString","split","searchParams","useSearchParams","stockId","get","isEditMode","Boolean","OpeningStockData","stockListReducer","stockList","response","Warehouse","getWarehouseListReducer","searchWarehouse","warehouseOptions","map","warehouse","value","_id","label","name","openingProducts","setOpeningProducts","selectedStock","setSelectedStock","console","log","selectedWarehouse","setSelectedWarehouse","isEditing","setIsEditing","editedQuantity","setEditedQuantity","quantity","inputRef","useRef","useEffect","getWarehouseListActions","getStockListActions","limit","page","search","length","foundStock","find","item","updateWarehouses","warehouseData","date","description","handleEditClick","handleQuantityChange","e","target","handleSave","handleKeyPress","key","handleClickOutside","current","contains","document","addEventListener","removeEventListener","_jsxs","children","_jsx","PageTitle","breadCrumbItems","path","active","title","Form","onSubmit","data","cleanedProducts","_ref","product","rest","payload","warehouseId","productStock","createStockActions","Row","Col","sm","Group","className","Label","Select","onChange","selectedOption","options","placeholder","isClearable","required","Control","type","as","rows","Button","onClick","handleShow","IoIosAdd","Card","style","boxShadow","Body","scope","_Fragment","index","_data$productData","_data$productData2","productData","code","ref","onKeyPress","width","display","marginTop","AiOutlineEdit","cursor","colSpan","_data$product","_data$product2","indexToRemove","updatedProducts","filter","_","handleDeleteProduct","RiDeleteBinLine","AddProductModal","handleClose"],"sourceRoot":""}