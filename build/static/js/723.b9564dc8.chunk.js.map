{"version":3,"file":"static/js/723.b9564dc8.chunk.js","mappings":"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","sources":["pages/account/Login.js","components/VerticalForm.js","components/FormInput.js","pages/account/AccountLayout.js","helpers/loader/Loading.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Button, Alert, Form } from 'react-bootstrap';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\nimport * as yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\n// actions\r\nimport { resetAuth, loginUser, getRolesListActions } from '../../redux/actions';\r\n\r\n// components\r\nimport { VerticalForm, FormInput } from '../../components/';\r\nimport AccountLayout from './AccountLayout';\r\nimport { useForm } from 'react-hook-form';\r\nimport { ButtonLoading } from '../../helpers/loader/Loading';\r\n\r\nconst Login = (): React$Element<any> => {\r\n    const { t } = useTranslation();\r\n    const dispatch = useDispatch();\r\n    const location = useLocation();\r\n    const redirectUrl = location.state?.from?.pathname || '/';\r\n\r\n    const { rolesList } = useSelector((state) => state.rolesListReducer || {});\r\n    const RolesData = rolesList?.response || [];\r\n\r\n    const { loading, userLoggedIn, user, error } = useSelector((state) => ({\r\n        loading: state.Auth.loading,\r\n        user: state.Auth.user,\r\n        error: state.Auth.error,\r\n        userLoggedIn: state.Auth.userLoggedIn,\r\n    }));\r\n\r\n    useEffect(() => {\r\n        dispatch(getRolesListActions());\r\n    }, [dispatch]);\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm({\r\n        resolver: yupResolver(\r\n            yup.object().shape({\r\n                roleId: yup.string().required(t('Please select a role')),\r\n                email: yup\r\n                    .string()\r\n                    .required(t('Please enter email'))\r\n                    .email(t('Please enter a valid email address')),\r\n                password: yup.string().required(t('Please enter Password')),\r\n            })\r\n        )\r\n\r\n    });\r\n\r\n    const onSubmit = (data) => {\r\n        console.log('Submitted:', data);\r\n        const payload = {\r\n            ...data,\r\n            fireBaseId: ''\r\n        }\r\n        dispatch(loginUser(payload));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {(userLoggedIn || user) && <Navigate to={redirectUrl} replace />}\r\n\r\n            <AccountLayout>\r\n                <div className=\"text-center w-75 m-auto\">\r\n                    <h4 className=\"text-dark-50 text-center mt-0 fw-bold\">{t('Log In')}</h4>\r\n                    <p className=\"text-muted mb-4\">\r\n                        {t('Enter your email address and password to access admin panel.')}\r\n                    </p>\r\n                </div>\r\n\r\n                {/* {error && (\r\n                    <Alert variant=\"danger\" className=\"my-2\">\r\n                        {error}\r\n                    </Alert>\r\n                )} */}\r\n\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <Form.Group className=\"mb-3\" controlId=\"role\">\r\n                        <Form.Label>{t('Role')}</Form.Label>\r\n                        <Form.Select {...register('roleId')} defaultValue=\"\">\r\n                            <option value=\"\" disabled>\r\n                                {t('Select Role')}\r\n                            </option>\r\n                            {RolesData.map((role) => (\r\n                                <option key={role._id} value={role._id} className='text-capitalize'>\r\n                                    {role.name}\r\n                                </option>\r\n                            ))}\r\n                        </Form.Select>\r\n                        {errors.roleId && (\r\n                            <div className=\"text-danger mt-1\">{errors.roleId.message}</div>\r\n                        )}\r\n                    </Form.Group>\r\n\r\n\r\n                    <FormInput\r\n                        label={t('Email')}\r\n                        type=\"text\"\r\n                        name=\"email\"\r\n                        register={register}\r\n                        error={errors.email}\r\n                        placeholder={t('Enter your email')}\r\n                        containerClass=\"mb-3\"\r\n                    />\r\n\r\n\r\n                    <FormInput\r\n                        label={t('Password')}\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        register={register}\r\n                        error={errors.password}\r\n                        placeholder={t('Enter your password')}\r\n                        containerClass=\"mb-3\"\r\n                    />\r\n\r\n                    <div className=\"mb-3 mb-0 text-center\">\r\n                        <Button variant=\"primary\" type=\"submit\" disabled={loading}>\r\n                            {!loading ? t('Log In') : <ButtonLoading />}\r\n                        </Button>\r\n                    </div>\r\n                </form>\r\n            </AccountLayout>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","// @flow\r\nimport React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\n\r\ntype VerticalFromProps = {\r\n    defaultValues?: Object,\r\n    resolver?: any,\r\n    children?: any,\r\n    onSubmit?: (value: any) => void,\r\n    formClass?: string,\r\n};\r\n\r\nconst VerticalForm = ({\r\n    defaultValues,\r\n    resolver,\r\n    children,\r\n    onSubmit,\r\n    formClass,\r\n}: VerticalFromProps): React$Element<any> => {\r\n    /*\r\n     * form methods\r\n     */\r\n    const methods = useForm({ defaultValues, resolver });\r\n    const {\r\n        handleSubmit,\r\n        register,\r\n        control,\r\n        formState: { errors },\r\n    } = methods;\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\r\n            {Array.isArray(children)\r\n                ? children.map((child) => {\r\n                      return child.props && child.props.name\r\n                          ? React.createElement(child.type, {\r\n                                ...{\r\n                                    ...child.props,\r\n                                    register,\r\n                                    key: child.props.name,\r\n                                    errors,\r\n                                    control,\r\n                                },\r\n                            })\r\n                          : child;\r\n                  })\r\n                : children}\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default VerticalForm;\r\n","// @flow\r\nimport React, { useState } from 'react';\r\nimport { Form, InputGroup } from 'react-bootstrap';\r\nimport classNames from 'classnames';\r\n\r\n/* Password Input */\r\nconst PasswordInput = ({ name, placeholder, refCallback, errors, register, className }) => {\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    return (\r\n        <>\r\n            <InputGroup className=\"mb-0\">\r\n                <Form.Control\r\n                    type={showPassword ? 'text' : 'password'}\r\n                    placeholder={placeholder}\r\n                    name={name}\r\n                    id={name}\r\n                    as=\"input\"\r\n                    ref={(r) => {\r\n                        if (refCallback) refCallback(r);\r\n                    }}\r\n                    className={className}\r\n                    isInvalid={errors && errors[name] ? true : false}\r\n                    {...(register ? register(name) : {})}\r\n                    autoComplete={name}\r\n                />\r\n                <div\r\n                    className={classNames('input-group-text', 'input-group-password', {\r\n                        'show-password': showPassword,\r\n                    })}\r\n                    data-password={showPassword ? 'true' : 'false'}>\r\n                    <span\r\n                        className=\"password-eye\"\r\n                        onClick={() => {\r\n                            setShowPassword(!showPassword);\r\n                        }}></span>\r\n                </div>\r\n            </InputGroup>\r\n        </>\r\n    );\r\n};\r\n\r\ntype FormInputProps = {\r\n    label?: string,\r\n    type?: string,\r\n    name?: string,\r\n    placeholder?: string,\r\n    register?: any,\r\n    errors?: any,\r\n    className?: string,\r\n    labelClassName?: string,\r\n    containerClass?: string,\r\n    refCallback?: any,\r\n    children?: any,\r\n};\r\n\r\nconst FormInput = ({\r\n    label,\r\n    type,\r\n    name,\r\n    placeholder,\r\n    register,\r\n    errors,\r\n    className,\r\n    labelClassName,\r\n    containerClass,\r\n    refCallback,\r\n    children,\r\n    ...otherProps\r\n}: FormInputProps): React$Element<React$FragmentType> => {\r\n    // handle input type\r\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\r\n\r\n    return (\r\n        <>\r\n            {type === 'hidden' ? (\r\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\r\n            ) : (\r\n                <>\r\n                    {type === 'password' ? (\r\n                        <>\r\n                            <Form.Group className={containerClass}>\r\n                                {label ? (\r\n                                    <>\r\n                                        {' '}\r\n                                        <Form.Label className={labelClassName}>{label}</Form.Label> {children}{' '}\r\n                                    </>\r\n                                ) : null}\r\n                                <PasswordInput\r\n                                    name={name}\r\n                                    placeholder={placeholder}\r\n                                    refCallback={refCallback}\r\n                                    errors={errors}\r\n                                    register={register}\r\n                                    className={className}\r\n                                />\r\n\r\n                                {errors && errors[name] ? (\r\n                                    <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\r\n                                        {errors[name]['message']}\r\n                                    </Form.Control.Feedback>\r\n                                ) : null}\r\n                            </Form.Group>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            {type === 'select' ? (\r\n                                <>\r\n                                    <Form.Group className={containerClass}>\r\n                                        {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\r\n\r\n                                        <Form.Select\r\n                                            type={type}\r\n                                            label={label}\r\n                                            name={name}\r\n                                            id={name}\r\n                                            ref={(r) => {\r\n                                                if (refCallback) refCallback(r);\r\n                                            }}\r\n                                            comp={comp}\r\n                                            className={className}\r\n                                            isInvalid={errors && errors[name] ? true : false}\r\n                                            {...(register ? register(name) : {})}\r\n                                            {...otherProps}>\r\n                                            {children}\r\n                                        </Form.Select>\r\n\r\n                                        {errors && errors[name] ? (\r\n                                            <Form.Control.Feedback type=\"invalid\">\r\n                                                {errors[name]['message']}\r\n                                            </Form.Control.Feedback>\r\n                                        ) : null}\r\n                                    </Form.Group>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    {type === 'checkbox' || type === 'radio' ? (\r\n                                        <>\r\n                                            <Form.Group className={containerClass}>\r\n                                                <Form.Check\r\n                                                    type={type}\r\n                                                    label={label}\r\n                                                    name={name}\r\n                                                    id={name}\r\n                                                    ref={(r) => {\r\n                                                        if (refCallback) refCallback(r);\r\n                                                    }}\r\n                                                    className={className}\r\n                                                    isInvalid={errors && errors[name] ? true : false}\r\n                                                    {...(register ? register(name) : {})}\r\n                                                    {...otherProps}\r\n                                                />\r\n\r\n                                                {errors && errors[name] ? (\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        {errors[name]['message']}\r\n                                                    </Form.Control.Feedback>\r\n                                                ) : null}\r\n                                            </Form.Group>\r\n                                        </>\r\n                                    ) : (\r\n                                        <Form.Group className={containerClass}>\r\n                                            {label ? <Form.Label className={labelClassName}>{label}</Form.Label> : null}\r\n\r\n                                            <Form.Control\r\n                                                type={type}\r\n                                                placeholder={placeholder}\r\n                                                name={name}\r\n                                                id={name}\r\n                                                as={comp}\r\n                                                ref={(r) => {\r\n                                                    if (refCallback) refCallback(r);\r\n                                                }}\r\n                                                className={className}\r\n                                                isInvalid={errors && errors[name] ? true : false}\r\n                                                {...(register ? register(name) : {})}\r\n                                                {...otherProps}\r\n                                                autoComplete={name}>\r\n                                                {children ? children : null}\r\n                                            </Form.Control>\r\n\r\n                                            {errors && errors[name] ? (\r\n                                                <Form.Control.Feedback type=\"invalid\">\r\n                                                    {errors[name]['message']}\r\n                                                </Form.Control.Feedback>\r\n                                            ) : null}\r\n                                        </Form.Group>\r\n                                    )}\r\n                                </>\r\n                            )}\r\n                        </>\r\n                    )}\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FormInput;\r\n","// @flow\r\nimport React, { useEffect } from 'react';\r\nimport { Container, Row, Col, Card } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n// images\r\nimport { Logo, Shivay_Logo } from '../../helpers/image';\r\n\r\ntype AccountLayoutProps = {\r\n    bottomLinks?: React$Element<any>,\r\n    children?: any,\r\n};\r\n\r\nconst AccountLayout = ({ bottomLinks, children }: AccountLayoutProps): React$Element<any> => {\r\n    const { t } = useTranslation();\r\n    const currentYear = new Date().getFullYear();\r\n\r\n    useEffect(() => {\r\n        if (document.body) document.body.classList.add('authentication-bg');\r\n\r\n        return () => {\r\n            if (document.body) document.body.classList.remove('authentication-bg');\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"account-pages pt-2 pt-sm-5 pb-4 pb-sm-5\">\r\n                <Container>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Col md={8} lg={6} xl={5} xxl={4}>\r\n                            <Card>\r\n                                {/* logo */}\r\n                                <Card.Header className=\" text-center bg-primary\" >\r\n                                    <Link to=\"/\">\r\n                                        <span>\r\n                                            <img src={Shivay_Logo} alt=\"\" height=\"70\" className='bg-primary rounded-pill px-3' />\r\n                                        </span>\r\n                                    </Link>\r\n                                </Card.Header>\r\n                                <Card.Body className=\"p-4\">{children}</Card.Body>\r\n                            </Card>\r\n\r\n                            {/* bottom links */}\r\n                            {bottomLinks}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n            <footer className=\"footer footer-alt\">{currentYear} © SHIVAY - <a href=\"https://rowthtech.com/\" className='text-muted'><u>rowthtech.com</u></a></footer>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AccountLayout;\r\n","import React from 'react';\r\nimport { ColorRing, ThreeDots } from 'react-loader-spinner';\r\nconst Loading = () => {\r\n    return (\r\n        <div style={{ height: '54vh', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n            <ThreeDots\r\n                color=\"#6655D9\"\r\n                strokeWidth=\"5\"\r\n                animationDuration=\"0.75\"\r\n                width=\"70\"\r\n                visible={true}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst DashboardLoading = () => {\r\n    return (\r\n        <div style={{ height: '30vh', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n            <ThreeDots\r\n                color=\"#6655D9\"\r\n                strokeWidth=\"5\"\r\n                animationDuration=\"0.75\"\r\n                width=\"70\"\r\n                visible={true}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst ButtonLoading = () => {\r\n    return (\r\n        // <div style={{ height: \"5vh\", display: 'flex', justifyContent: 'center', alignItems: 'center' }} >\r\n        <div className=\" d-flex justify-content-center align-items-center w-100\" style={{ height: '2vh' }}>\r\n            <ColorRing\r\n                visible={true}\r\n                height=\"25\"\r\n                width=\"25\"\r\n                ariaLabel=\"blocks-loading\"\r\n                wrapperStyle={{}}\r\n                wrapperClass=\"blocks-wrapper\"\r\n                colors={['#fff', '#fff', '#fff', '#fff', '#fff']}\r\n            />\r\n\r\n            {/* <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"visually-hidden\">Loading...</span>\r\n            </div> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst CartLoading = () => {\r\n    return (\r\n        // <div style={{ height: \"5vh\", display: 'flex', justifyContent: 'center', alignItems: 'center' }} >\r\n        <div className=\"p-0 d-flex justify-content-center align-items-center m-0\">\r\n            <ColorRing\r\n                visible={true}\r\n                height=\"32\"\r\n                width=\"32\"\r\n                ariaLabel=\"blocks-loading\"\r\n                wrapperStyle={{}}\r\n                wrapperClass=\"blocks-wrapper\"\r\n                colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\r\n            />\r\n\r\n            {/* <div class=\"spinner-border\" role=\"status\">\r\n                <span class=\"visually-hidden\">Loading...</span>\r\n            </div> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport { Loading, ButtonLoading, CartLoading, DashboardLoading };\r\n"],"names":["Login","_location$state","_location$state$from","t","useTranslation","dispatch","useDispatch","redirectUrl","useLocation","state","from","pathname","rolesList","useSelector","rolesListReducer","RolesData","response","loading","userLoggedIn","user","error","Auth","useEffect","getRolesListActions","register","handleSubmit","formState","errors","useForm","resolver","yupResolver","yup","shape","roleId","required","email","password","_jsxs","_Fragment","children","_jsx","Navigate","to","replace","AccountLayout","className","onSubmit","data","console","log","payload","fireBaseId","loginUser","Form","Group","controlId","Label","Select","defaultValue","value","disabled","map","role","_id","name","message","FormInput","label","type","placeholder","containerClass","Button","variant","ButtonLoading","_ref","defaultValues","formClass","methods","control","noValidate","Array","isArray","child","props","React","key","PasswordInput","refCallback","showPassword","setShowPassword","useState","InputGroup","Control","id","as","ref","r","isInvalid","autoComplete","classNames","onClick","_ref2","labelClassName","otherProps","comp","Feedback","Check","bottomLinks","currentYear","Date","getFullYear","document","body","classList","add","remove","Container","Row","Col","md","lg","xl","xxl","Card","Header","Link","src","Shivay_Logo","alt","height","Body","href","Loading","style","display","justifyContent","alignItems","ThreeDots","color","strokeWidth","animationDuration","width","visible","DashboardLoading","ColorRing","ariaLabel","wrapperStyle","wrapperClass","colors"],"sourceRoot":""}