{"version":3,"file":"static/js/858.a125a439.chunk.js","mappings":"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","sources":["../node_modules/react-hook-form/src/utils/isCheckBoxInput.ts","../node_modules/react-hook-form/src/utils/isDateObject.ts","../node_modules/react-hook-form/src/utils/isNullOrUndefined.ts","../node_modules/react-hook-form/src/utils/isObject.ts","../node_modules/react-hook-form/src/logic/getEventValue.ts","../node_modules/react-hook-form/src/logic/isNameInFieldArray.ts","../node_modules/react-hook-form/src/logic/getNodeParentName.ts","../node_modules/react-hook-form/src/utils/isPlainObject.ts","../node_modules/react-hook-form/src/utils/isWeb.ts","../node_modules/react-hook-form/src/utils/cloneObject.ts","../node_modules/react-hook-form/src/utils/compact.ts","../node_modules/react-hook-form/src/utils/isUndefined.ts","../node_modules/react-hook-form/src/utils/get.ts","../node_modules/react-hook-form/src/utils/isBoolean.ts","../node_modules/react-hook-form/src/utils/isKey.ts","../node_modules/react-hook-form/src/utils/stringToPath.ts","../node_modules/react-hook-form/src/utils/set.ts","../node_modules/react-hook-form/src/constants.ts","../node_modules/react-hook-form/src/useFormContext.tsx","../node_modules/react-hook-form/src/logic/getProxyFormState.ts","../node_modules/react-hook-form/src/utils/isEmptyObject.ts","../node_modules/react-hook-form/src/logic/shouldRenderFormState.ts","../node_modules/react-hook-form/src/utils/convertToArrayPayload.ts","../node_modules/react-hook-form/src/logic/shouldSubscribeByName.ts","../node_modules/react-hook-form/src/useSubscribe.ts","../node_modules/react-hook-form/src/utils/isString.ts","../node_modules/react-hook-form/src/logic/generateWatchOutput.ts","../node_modules/react-hook-form/src/useWatch.ts","../node_modules/react-hook-form/src/logic/appendErrors.ts","../node_modules/react-hook-form/src/logic/getValidationModes.ts","../node_modules/react-hook-form/src/logic/isWatched.ts","../node_modules/react-hook-form/src/logic/iterateFieldsByAction.ts","../node_modules/react-hook-form/src/logic/updateFieldArrayRootError.ts","../node_modules/react-hook-form/src/utils/isFileInput.ts","../node_modules/react-hook-form/src/utils/isFunction.ts","../node_modules/react-hook-form/src/utils/isHTMLElement.ts","../node_modules/react-hook-form/src/utils/isMessage.ts","../node_modules/react-hook-form/src/utils/isRadioInput.ts","../node_modules/react-hook-form/src/utils/isRegex.ts","../node_modules/react-hook-form/src/logic/getCheckboxValue.ts","../node_modules/react-hook-form/src/logic/getRadioValue.ts","../node_modules/react-hook-form/src/logic/getValidateError.ts","../node_modules/react-hook-form/src/logic/getValueAndMessage.ts","../node_modules/react-hook-form/src/logic/validateField.ts","../node_modules/react-hook-form/src/utils/unset.ts","../node_modules/react-hook-form/src/utils/createSubject.ts","../node_modules/react-hook-form/src/utils/isPrimitive.ts","../node_modules/react-hook-form/src/utils/deepEqual.ts","../node_modules/react-hook-form/src/utils/isMultipleSelect.ts","../node_modules/react-hook-form/src/utils/isRadioOrCheckbox.ts","../node_modules/react-hook-form/src/utils/live.ts","../node_modules/react-hook-form/src/utils/objectHasFunction.ts","../node_modules/react-hook-form/src/logic/getDirtyFields.ts","../node_modules/react-hook-form/src/logic/getFieldValueAs.ts","../node_modules/react-hook-form/src/logic/getFieldValue.ts","../node_modules/react-hook-form/src/logic/getResolverOptions.ts","../node_modules/react-hook-form/src/logic/getRuleValue.ts","../node_modules/react-hook-form/src/logic/hasPromiseValidation.ts","../node_modules/react-hook-form/src/logic/hasValidation.ts","../node_modules/react-hook-form/src/logic/schemaErrorLookup.ts","../node_modules/react-hook-form/src/logic/skipValidation.ts","../node_modules/react-hook-form/src/logic/unsetEmptyArray.ts","../node_modules/react-hook-form/src/logic/createFormControl.ts","../node_modules/react-hook-form/src/useForm.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is Date => value instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown): value is object =>\n  typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  names.has(getNodeParentName(name));\n","export default (name: string) =>\n  name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n","import isObject from './isObject';\n\nexport default (tempObject: object) => {\n  const prototypeCopy =\n    tempObject.constructor && tempObject.constructor.prototype;\n\n  return (\n    isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf')\n  );\n};\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isObject from './isObject';\nimport isPlainObject from './isPlainObject';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n  const isFileListInstance =\n    typeof FileList !== 'undefined' ? data instanceof FileList : false;\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (\n    !(isWeb && (data instanceof Blob || isFileListInstance)) &&\n    (isArray || isObject(data))\n  ) {\n    copy = isArray ? [] : {};\n\n    if (!isArray && !isPlainObject(data)) {\n      copy = data;\n    } else {\n      for (const key in data) {\n        if (data.hasOwnProperty(key)) {\n          copy[key] = cloneObject(data[key]);\n        }\n      }\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","export default <TValue>(value: TValue[]) =>\n  Array.isArray(value) ? value.filter(Boolean) : [];\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(\n  object: T,\n  path?: string | null,\n  defaultValue?: unknown,\n): any => {\n  if (!path || !isObject(object)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) =>\n      isNullOrUndefined(result) ? result : result[key as keyof {}],\n    object,\n  );\n\n  return isUndefined(result) || result === object\n    ? isUndefined(object[path as keyof T])\n      ? defaultValue\n      : object[path as keyof T]\n    : result;\n};\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldPath, FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default (\n  object: FieldValues,\n  path: FieldPath<FieldValues>,\n  value?: unknown,\n) => {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n            ? []\n            : {};\n    }\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return;\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n};\n","export const EVENTS = {\n  BLUR: 'blur',\n  FOCUS_OUT: 'focusout',\n  CHANGE: 'change',\n} as const;\n\nexport const VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n} as const;\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n} as const;\n","import React from 'react';\n\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n  TContext = any,\n  TransformedValues extends FieldValues | undefined = undefined,\n>(): UseFormReturn<TFieldValues, TContext, TransformedValues> =>\n  React.useContext(HookFormContext) as UseFormReturn<\n    TFieldValues,\n    TContext,\n    TransformedValues\n  >;\n\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext = any,\n  TTransformedValues extends FieldValues | undefined = undefined,\n>(\n  props: FormProviderProps<TFieldValues, TContext, TTransformedValues>,\n) => {\n  const { children, ...data } = props;\n  return (\n    <HookFormContext.Provider value={data as unknown as UseFormReturn}>\n      {children}\n    </HookFormContext.Provider>\n  );\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Control, FieldValues, FormState, ReadFormState } from '../types';\n\nexport default <TFieldValues extends FieldValues, TContext = any>(\n  formState: FormState<TFieldValues>,\n  control: Control<TFieldValues, TContext>,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  const result = {\n    defaultValues: control._defaultValues,\n  } as typeof formState;\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: () => {\n        const _key = key as keyof FormState<TFieldValues> & keyof ReadFormState;\n\n        if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n          control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[_key] = true);\n        return formState[_key];\n      },\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport {\n  Control,\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  ReadFormState,\n} from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\n\nexport default <T extends FieldValues, K extends ReadFormState>(\n  formStateData: Partial<FormState<T>> & { name?: InternalFieldName },\n  _proxyFormState: K,\n  updateFormState: Control<T>['_updateFormState'],\n  isRoot?: boolean,\n) => {\n  updateFormState(formStateData);\n  const { name, ...formState } = formStateData;\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T extends string | string[] | undefined>(\n  name?: T,\n  signalName?: string,\n  exact?: boolean,\n) =>\n  !name ||\n  !signalName ||\n  name === signalName ||\n  convertToArrayPayload(name).some(\n    (currentName) =>\n      currentName &&\n      (exact\n        ? currentName === signalName\n        : currentName.startsWith(signalName) ||\n          signalName.startsWith(currentName)),\n  );\n","import React from 'react';\n\nimport { Subject } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  next: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const subscription =\n      !props.disabled &&\n      _props.current.subject &&\n      _props.current.subject.subscribe({\n        next: _props.current.next,\n      });\n\n    return () => {\n      subscription && subscription.unsubscribe();\n    };\n  }, [props.disabled]);\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { DeepPartial, FieldValues, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default <T>(\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n  defaultValue?: DeepPartial<T> | unknown,\n) => {\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names);\n    return get(formValues, names, defaultValue);\n  }\n\n  if (Array.isArray(names)) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n\n  return formValues;\n};\n","import React from 'react';\n\nimport generateWatchOutput from './logic/generateWatchOutput';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport cloneObject from './utils/cloneObject';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * Subscribe to the entire form values change and re-render at the hook level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @param props - defaultValue, disable subscription and match exact name.\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   control,\n *   defaultValue: {\n *     name: \"data\"\n *   },\n *   exact: false,\n * })\n * ```\n */\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: DeepPartialSkipArrayKey<TFieldValues>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): DeepPartialSkipArrayKey<TFieldValues>;\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @param props - defaultValue, disable subscription and match exact name.\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   control,\n *   name: \"fieldA\",\n *   defaultValue: \"default value\",\n *   exact: false,\n * })\n * ```\n */\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @param props - defaultValue, disable subscription and match exact name.\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   control,\n *   name: [\"fieldA\", \"fieldB\"],\n *   defaultValue: {\n *     fieldA: \"data\",\n *     fieldB: \"data\"\n *   },\n *   exact: false,\n * })\n * ```\n */\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends\n    readonly FieldPath<TFieldValues>[] = readonly FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: DeepPartialSkipArrayKey<TFieldValues>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * // can skip passing down the control into useWatch if the form is wrapped with the FormProvider\n * const values = useWatch()\n * ```\n */\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(): DeepPartialSkipArrayKey<TFieldValues>;\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nexport function useWatch<TFieldValues extends FieldValues>(\n  props?: UseWatchProps<TFieldValues>,\n) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n    exact,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.values,\n    next: (formState: { name?: InternalFieldName; values?: FieldValues }) => {\n      if (\n        shouldSubscribeByName(\n          _name.current as InternalFieldName,\n          formState.name,\n          exact,\n        )\n      ) {\n        updateValue(\n          cloneObject(\n            generateWatchOutput(\n              _name.current as InternalFieldName | InternalFieldName[],\n              control._names,\n              formState.values || control._formValues,\n              false,\n              defaultValue,\n            ),\n          ),\n        );\n      }\n    },\n  });\n\n  const [value, updateValue] = React.useState(\n    control._getWatch(\n      name as InternalFieldName,\n      defaultValue as DeepPartialSkipArrayKey<TFieldValues>,\n    ),\n  );\n\n  React.useEffect(() => control._removeUnmounted());\n\n  return value;\n}\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode, ValidationModeFlags } from '../types';\n\nexport default (mode?: Mode): ValidationModeFlags => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import { FieldRefs, InternalFieldName, Ref } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\n\nconst iterateFieldsByAction = (\n  fields: FieldRefs,\n  action: (ref: Ref, name: string) => 1 | undefined | void,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[] | 0,\n  abortEarly?: boolean,\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const { _f, ...currentField } = field;\n\n      if (_f) {\n        if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n          return true;\n        } else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n          return true;\n        } else {\n          if (iterateFieldsByAction(currentField, action)) {\n            break;\n          }\n        }\n      } else if (isObject(currentField)) {\n        if (iterateFieldsByAction(currentField as FieldRefs, action)) {\n          break;\n        }\n      }\n    }\n  }\n  return;\n};\nexport default iterateFieldsByAction;\n","import {\n  FieldError,\n  FieldErrors,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport get from '../utils/get';\nimport set from '../utils/set';\n\nexport default <T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  error: Partial<Record<string, FieldError>>,\n  name: InternalFieldName,\n): FieldErrors<T> => {\n  const fieldArrayErrors = convertToArrayPayload(get(errors, name));\n  set(fieldArrayErrors, 'root', error[name]);\n  set(errors, name, fieldArrayErrors);\n  return errors;\n};\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isWeb from './isWeb';\n\nexport default (value: unknown): value is HTMLElement => {\n  if (!isWeb) {\n    return false;\n  }\n\n  const owner = value ? ((value as HTMLElement).ownerDocument as Document) : 0;\n  return (\n    value instanceof\n    (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement)\n  );\n};\n","import { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message => isString(value);\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  FieldValues,\n  InternalFieldErrors,\n  InternalNameSet,\n  MaxType,\n  Message,\n  MinType,\n  NativeFieldValue,\n} from '../types';\nimport get from '../utils/get';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends FieldValues>(\n  field: Field,\n  disabledFieldNames: InternalNameSet,\n  formValues: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n  isFieldArray?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n  } = field._f;\n  const inputValue: NativeFieldValue = get(formValues, name);\n  if (!mount || disabledFieldNames.has(name)) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) &&\n      isUndefined(ref.value) &&\n      isUndefined(inputValue)) ||\n    (isHTMLElement(ref) && ref.value === '') ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType: MaxType = INPUT_VALIDATION_RULES.maxLength,\n    minType: MinType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    isFieldArray\n      ? !Array.isArray(inputValue) || !inputValue.length\n      : required &&\n        ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n          (isBoolean(inputValue) && !inputValue) ||\n          (isCheckBox && !getCheckboxValue(refs).isValid) ||\n          (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNullOrUndefined(inputValue) && !isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber ||\n        (inputValue ? +inputValue : inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      const convertTimeToDate = (time: unknown) =>\n        new Date(new Date().toDateString() + ' ' + time);\n      const isTime = ref.type == 'time';\n      const isWeek = ref.type == 'week';\n\n      if (isString(maxOutput.value) && inputValue) {\n        exceedMax = isTime\n          ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n          : isWeek\n            ? inputValue > maxOutput.value\n            : valueDate > new Date(maxOutput.value);\n      }\n\n      if (isString(minOutput.value) && inputValue) {\n        exceedMin = isTime\n          ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n          : isWeek\n            ? inputValue < minOutput.value\n            : valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (\n    (maxLength || minLength) &&\n    !isEmpty &&\n    (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))\n  ) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > +maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < +minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue, formValues);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue, formValues),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction isEmptyArray(obj: unknown[]) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default function unset(object: any, path: string | (string | number)[]) {\n  const paths = Array.isArray(path)\n    ? path\n    : isKey(path)\n      ? [path]\n      : stringToPath(path);\n\n  const childObject = paths.length === 1 ? object : baseGet(object, paths);\n\n  const index = paths.length - 1;\n  const key = paths[index];\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  if (\n    index !== 0 &&\n    ((isObject(childObject) && isEmptyObject(childObject)) ||\n      (Array.isArray(childObject) && isEmptyArray(childObject)))\n  ) {\n    unset(object, paths.slice(0, -1));\n  }\n\n  return object;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default <T>(): Subject<T> => {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next && observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n};\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && ref.isConnected;\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<T>(data: T, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: Record<\n    Extract<keyof T, string>,\n    ReturnType<typeof markFieldsDirty> | boolean\n  >,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n      ? value === ''\n        ? NaN\n        : value\n          ? +value\n          : value\n      : valueAsDate && isString(value)\n        ? new Date(value)\n        : setValueAs\n          ? setValueAs(value)\n          : value;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n      ? rule.source\n      : isObject(rule)\n        ? isRegex(rule.value)\n          ? rule.value.source\n          : rule.value\n        : rule;\n","import { Field, Validate } from '../types';\nimport isFunction from '../utils/isFunction';\nimport isObject from '../utils/isObject';\n\nconst ASYNC_FUNCTION = 'AsyncFunction';\n\nexport default (fieldReference: Field['_f']) =>\n  !!fieldReference &&\n  !!fieldReference.validate &&\n  !!(\n    (isFunction(fieldReference.validate) &&\n      fieldReference.validate.constructor.name === ASYNC_FUNCTION) ||\n    (isObject(fieldReference.validate) &&\n      Object.values(fieldReference.validate).find(\n        (validateFunction: Validate<unknown, unknown>) =>\n          validateFunction.constructor.name === ASYNC_FUNCTION,\n      ))\n  );\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup<T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import { ValidationModeFlags } from '../types';\n\nexport default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<ValidationModeFlags>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  Control,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UseFormClearErrors,\n  UseFormGetFieldState,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport getValidationModes from './getValidationModes';\nimport hasPromiseValidation from './hasPromiseValidation';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport iterateFieldsByAction from './iterateFieldsByAction';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport updateFieldArrayRootError from './updateFieldArrayRootError';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    submitCount: 0,\n    isDirty: false,\n    isLoading: isFunction(_options.defaultValues),\n    isValidating: false,\n    isSubmitted: false,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    touchedFields: {},\n    dirtyFields: {},\n    validatingFields: {},\n    errors: _options.errors || {},\n    disabled: _options.disabled || false,\n  };\n  let _fields: FieldRefs = {};\n  let _defaultValues =\n    isObject(_options.defaultValues) || isObject(_options.values)\n      ? cloneObject(_options.defaultValues || _options.values) || {}\n      : {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _state = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    disabled: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  };\n  let delayErrorCallback: DelayCallback | null;\n  let timer = 0;\n  const _proxyFormState: ReadFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    validatingFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    values: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T) =>\n    (wait: number) => {\n      clearTimeout(timer);\n      timer = setTimeout(callback, wait);\n    };\n\n  const _updateValid = async (shouldUpdateValid?: boolean) => {\n    if (!_options.disabled && (_proxyFormState.isValid || shouldUpdateValid)) {\n      const isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuiltInValidation(_fields, true);\n\n      if (isValid !== _formState.isValid) {\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n  };\n\n  const _updateIsValidating = (names?: string[], isValidating?: boolean) => {\n    if (\n      !_options.disabled &&\n      (_proxyFormState.isValidating || _proxyFormState.validatingFields)\n    ) {\n      (names || Array.from(_names.mount)).forEach((name) => {\n        if (name) {\n          isValidating\n            ? set(_formState.validatingFields, name, isValidating)\n            : unset(_formState.validatingFields, name);\n        }\n      });\n\n      _subjects.state.next({\n        validatingFields: _formState.validatingFields,\n        isValidating: !isEmptyObject(_formState.validatingFields),\n      });\n    }\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    values = [],\n    method,\n    args,\n    shouldSetValues = true,\n    shouldUpdateFieldsAndState = true,\n  ) => {\n    if (args && method && !_options.disabled) {\n      _state.action = true;\n      if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n        const fieldValues = method(get(_fields, name), args.argA, args.argB);\n        shouldSetValues && set(_fields, name, fieldValues);\n      }\n\n      if (\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.errors, name))\n      ) {\n        const errors = method(\n          get(_formState.errors, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.errors, name, errors);\n        unsetEmptyArray(_formState.errors, name);\n      }\n\n      if (\n        _proxyFormState.touchedFields &&\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.touchedFields, name))\n      ) {\n        const touchedFields = method(\n          get(_formState.touchedFields, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      }\n\n      if (_proxyFormState.dirtyFields) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n      }\n\n      _subjects.state.next({\n        name,\n        isDirty: _getDirty(name, values),\n        dirtyFields: _formState.dirtyFields,\n        errors: _formState.errors,\n        isValid: _formState.isValid,\n      });\n    } else {\n      set(_formValues, name, values);\n    }\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => {\n    set(_formState.errors, name, error);\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const _setErrors = (errors: FieldErrors<TFieldValues>) => {\n    _formState.errors = errors;\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: false,\n    });\n  };\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs: boolean,\n    value?: unknown,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(\n        _formValues,\n        name,\n        isUndefined(value) ? get(_defaultValues, name) : value,\n      );\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n\n      _state.mount && _updateValid();\n    }\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isBlurEvent?: boolean,\n    shouldDirty?: boolean,\n    shouldRender?: boolean,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let shouldUpdateField = false;\n    let isPreviousDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n\n    if (!_options.disabled) {\n      const disabledField = !!(\n        get(_fields, name) &&\n        get(_fields, name)._f &&\n        get(_fields, name)._f.disabled\n      );\n      if (!isBlurEvent || shouldDirty) {\n        if (_proxyFormState.isDirty) {\n          isPreviousDirty = _formState.isDirty;\n          _formState.isDirty = output.isDirty = _getDirty();\n          shouldUpdateField = isPreviousDirty !== output.isDirty;\n        }\n\n        const isCurrentFieldPristine =\n          disabledField || deepEqual(get(_defaultValues, name), fieldValue);\n\n        isPreviousDirty = !!(\n          !disabledField && get(_formState.dirtyFields, name)\n        );\n        isCurrentFieldPristine || disabledField\n          ? unset(_formState.dirtyFields, name)\n          : set(_formState.dirtyFields, name, true);\n        output.dirtyFields = _formState.dirtyFields;\n        shouldUpdateField =\n          shouldUpdateField ||\n          (_proxyFormState.dirtyFields &&\n            isPreviousDirty !== !isCurrentFieldPristine);\n      }\n\n      if (isBlurEvent) {\n        const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n        if (!isPreviousFieldTouched) {\n          set(_formState.touchedFields, name, isBlurEvent);\n          output.touchedFields = _formState.touchedFields;\n          shouldUpdateField =\n            shouldUpdateField ||\n            (_proxyFormState.touchedFields &&\n              isPreviousFieldTouched !== isBlurEvent);\n        }\n      }\n\n      shouldUpdateField && shouldRender && _subjects.state.next(output);\n    }\n\n    return shouldUpdateField ? output : {};\n  };\n\n  const shouldRenderByError = (\n    name: InternalFieldName,\n    isValid?: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ) => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid &&\n      isBoolean(isValid) &&\n      _formState.isValid !== isValid;\n\n    if (_options.delayError && error) {\n      delayErrorCallback = debounce(() => updateErrors(name, error));\n      delayErrorCallback(_options.delayError);\n    } else {\n      clearTimeout(timer);\n      delayErrorCallback = null;\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      (error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n      !isEmptyObject(fieldState) ||\n      shouldUpdateValid\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) => {\n    _updateIsValidating(name, true);\n    const result = await _options.resolver!(\n      _formValues as TFieldValues,\n      _options.context,\n      getResolverOptions(\n        name || _names.mount,\n        _fields,\n        _options.criteriaMode,\n        _options.shouldUseNativeValidation,\n      ),\n    );\n    _updateIsValidating(name);\n    return result;\n  };\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema(names);\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n\n    return errors;\n  };\n\n  const executeBuiltInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context: {\n      valid: boolean;\n    } = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const { _f, ...fieldValue } = field as Field;\n\n        if (_f) {\n          const isFieldArrayRoot = _names.array.has(_f.name);\n          const isPromiseFunction =\n            field._f && hasPromiseValidation((field as Field)._f);\n\n          if (isPromiseFunction && _proxyFormState.validatingFields) {\n            _updateIsValidating([name], true);\n          }\n\n          const fieldError = await validateField(\n            field as Field,\n            _names.disabled,\n            _formValues,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation && !shouldOnlyCheckValid,\n            isFieldArrayRoot,\n          );\n\n          if (isPromiseFunction && _proxyFormState.validatingFields) {\n            _updateIsValidating([name]);\n          }\n\n          if (fieldError[_f.name]) {\n            context.valid = false;\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          !shouldOnlyCheckValid &&\n            (get(fieldError, _f.name)\n              ? isFieldArrayRoot\n                ? updateFieldArrayRootError(\n                    _formState.errors,\n                    fieldError,\n                    _f.name,\n                  )\n                : set(_formState.errors, _f.name, fieldError[_f.name])\n              : unset(_formState.errors, _f.name));\n        }\n\n        !isEmptyObject(fieldValue) &&\n          (await executeBuiltInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) =>\n    !_options.disabled &&\n    (name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues));\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) =>\n    generateWatchOutput(\n      names,\n      _names,\n      {\n        ...(_state.mount\n          ? _formValues\n          : isUndefined(defaultValue)\n            ? _defaultValues\n            : isString(names)\n              ? { [names]: defaultValue }\n              : defaultValue),\n      },\n      isGlobal,\n      defaultValue,\n    );\n\n  const _getFieldArray = <TFieldArrayValues>(\n    name: InternalFieldName,\n  ): Partial<TFieldArrayValues>[] =>\n    compact(\n      get(\n        _state.mount ? _formValues : _defaultValues,\n        name,\n        _options.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (optionRef) =>\n              (optionRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(optionRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : fieldReference.refs[0] &&\n                (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = '';\n        } else {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.values.next({\n              name,\n              values: { ..._formValues },\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(\n        name,\n        fieldValue,\n        options.shouldTouch,\n        options.shouldDirty,\n        true,\n      );\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U extends SetValueConfig,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}`;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        isObject(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    const cloneValue = cloneObject(value);\n\n    set(_formValues, name, cloneValue);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: { ..._formValues },\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _subjects.state.next({\n          name,\n          dirtyFields: getDirtyFields(_defaultValues, _formValues),\n          isDirty: _getDirty(name, cloneValue),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue)\n        ? setValues(name, cloneValue, options)\n        : setFieldValue(name, cloneValue, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({ ..._formState });\n    _subjects.values.next({\n      name: _state.mount ? name : undefined,\n      values: { ..._formValues },\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    _state.mount = true;\n    const target = event.target;\n    let name = target.name as string;\n    let isFieldValueUpdated = true;\n    const field: Field = get(_fields, name);\n    const getCurrentFieldValue = () =>\n      target.type ? getFieldValue(field._f) : getEventValue(event);\n    const _updateIsFieldValueUpdated = (fieldValue: any): void => {\n      isFieldValueUpdated =\n        Number.isNaN(fieldValue) ||\n        (isDateObject(fieldValue) && isNaN(fieldValue.getTime())) ||\n        deepEqual(fieldValue, get(_formValues, name, fieldValue));\n    };\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = getCurrentFieldValue();\n      const isBlurEvent =\n        event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      set(_formValues, name, fieldValue);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n        delayErrorCallback && delayErrorCallback(0);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.values.next({\n          name,\n          type: event.type,\n          values: { ..._formValues },\n        });\n\n      if (shouldSkipValidation) {\n        if (_proxyFormState.isValid) {\n          if (_options.mode === 'onBlur' && isBlurEvent) {\n            _updateValid();\n          } else if (!isBlurEvent) {\n            _updateValid();\n          }\n        }\n\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n\n        _updateIsFieldValueUpdated(fieldValue);\n\n        if (isFieldValueUpdated) {\n          const previousErrorLookupResult = schemaErrorLookup(\n            _formState.errors,\n            _fields,\n            name,\n          );\n          const errorLookupResult = schemaErrorLookup(\n            errors,\n            _fields,\n            previousErrorLookupResult.name || name,\n          );\n\n          error = errorLookupResult.error;\n          name = errorLookupResult.name;\n\n          isValid = isEmptyObject(errors);\n        }\n      } else {\n        _updateIsValidating([name], true);\n        error = (\n          await validateField(\n            field,\n            _names.disabled,\n            _formValues,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n        _updateIsValidating([name]);\n\n        _updateIsFieldValueUpdated(fieldValue);\n\n        if (isFieldValueUpdated) {\n          if (error) {\n            isValid = false;\n          } else if (_proxyFormState.isValid) {\n            isValid = await executeBuiltInValidation(_fields, true);\n          }\n        }\n      }\n\n      if (isFieldValueUpdated) {\n        field._f.deps &&\n          trigger(\n            field._f.deps as\n              | FieldPath<TFieldValues>\n              | FieldPath<TFieldValues>[],\n          );\n        shouldRenderByError(name, isValid, error, fieldState);\n      }\n    }\n  };\n\n  const _focusInput = (ref: Ref, key: string) => {\n    if (get(_formState.errors, key) && ref.focus) {\n      ref.focus();\n      return 1;\n    }\n    return;\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuiltInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuiltInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver || !name ? { isValid } : {}),\n      errors: _formState.errors,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      iterateFieldsByAction(\n        _fields,\n        _focusInput,\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ...(_state.mount ? _formValues : _defaultValues),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n        ? get(values, fieldNames)\n        : fieldNames.map((name) => get(values, name));\n  };\n\n  const getFieldState: UseFormGetFieldState<TFieldValues> = (\n    name,\n    formState,\n  ) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: !!get((formState || _formState).dirtyFields, name),\n    error: get((formState || _formState).errors, name),\n    isValidating: !!get(_formState.validatingFields, name),\n    isTouched: !!get((formState || _formState).touchedFields, name),\n  });\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name &&\n      convertToArrayPayload(name).forEach((inputName) =>\n        unset(_formState.errors, inputName),\n      );\n\n    _subjects.state.next({\n      errors: name ? _formState.errors : {},\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n    const currentError = get(_formState.errors, name) || {};\n\n    // Don't override existing error messages elsewhere in the object tree.\n    const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n\n    set(_formState.errors, name, {\n      ...restOfErrorTree,\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: DeepPartial<TFieldValues>,\n  ) =>\n    isFunction(name)\n      ? _subjects.values.subscribe({\n          next: (payload) =>\n            name(\n              _getWatch(undefined, defaultValue),\n              payload as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (!options.keepValue) {\n        unset(_fields, fieldName);\n        unset(_formValues, fieldName);\n      }\n\n      !options.keepError && unset(_formState.errors, fieldName);\n      !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n      !options.keepTouched && unset(_formState.touchedFields, fieldName);\n      !options.keepIsValidating &&\n        unset(_formState.validatingFields, fieldName);\n      !_options.shouldUnregister &&\n        !options.keepDefaultValue &&\n        unset(_defaultValues, fieldName);\n    }\n\n    _subjects.values.next({\n      values: { ..._formValues },\n    });\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const _updateDisabledField: Control<TFieldValues>['_updateDisabledField'] = ({\n    disabled,\n    name,\n    field,\n    fields,\n  }) => {\n    if (\n      (isBoolean(disabled) && _state.mount) ||\n      !!disabled ||\n      _names.disabled.has(name)\n    ) {\n      disabled ? _names.disabled.add(name) : _names.disabled.delete(name);\n\n      updateTouchAndDirty(\n        name,\n        getFieldValue(field ? field._f : get(fields, name)._f),\n        false,\n        false,\n        true,\n      );\n    }\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n    const disabledIsDefined =\n      isBoolean(options.disabled) || isBoolean(_options.disabled);\n\n    set(_fields, name, {\n      ...(field || {}),\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    if (field) {\n      _updateDisabledField({\n        field,\n        disabled: isBoolean(options.disabled)\n          ? options.disabled\n          : _options.disabled,\n        name,\n      });\n    } else {\n      updateValidAndValue(name, true, options.value);\n    }\n\n    return {\n      ...(disabledIsDefined\n        ? { disabled: options.disabled || _options.disabled }\n        : {}),\n      ...(_options.progressive\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (\n            radioOrCheckbox\n              ? refs.find((option: Ref) => option === fieldRef)\n              : fieldRef === field._f.ref\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: {\n              ...field._f,\n              ...(radioOrCheckbox\n                ? {\n                    refs: [\n                      ...refs.filter(live),\n                      fieldRef,\n                      ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                    ],\n                    ref: { type: fieldRef.type, name },\n                  }\n                : { ref: fieldRef }),\n            },\n          });\n\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _state.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const _focusError = () =>\n    _options.shouldFocusError &&\n    iterateFieldsByAction(_fields, _focusInput, _names.mount);\n\n  const _disableForm = (disabled?: boolean) => {\n    if (isBoolean(disabled)) {\n      _subjects.state.next({ disabled });\n      iterateFieldsByAction(\n        _fields,\n        (ref, name) => {\n          const currentField: Field = get(_fields, name);\n          if (currentField) {\n            ref.disabled = currentField._f.disabled || disabled;\n\n            if (Array.isArray(currentField._f.refs)) {\n              currentField._f.refs.forEach((inputRef) => {\n                inputRef.disabled = currentField._f.disabled || disabled;\n              });\n            }\n          }\n        },\n        0,\n        false,\n      );\n    }\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      let onValidError = undefined;\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n\n      let fieldValues = cloneObject(_formValues);\n\n      if (_names.disabled.size) {\n        for (const name of _names.disabled) {\n          set(fieldValues, name, undefined);\n        }\n      }\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      if (_options.resolver) {\n        const { errors, values } = await _executeSchema();\n        _formState.errors = errors;\n        fieldValues = values;\n      } else {\n        await executeBuiltInValidation(_fields);\n      }\n\n      unset(_formState.errors, 'root');\n\n      if (isEmptyObject(_formState.errors)) {\n        _subjects.state.next({\n          errors: {},\n        });\n        try {\n          await onValid(fieldValues as TFieldValues, e);\n        } catch (error) {\n          onValidError = error;\n        }\n      } else {\n        if (onInvalid) {\n          await onInvalid({ ..._formState.errors }, e);\n        }\n        _focusError();\n        setTimeout(_focusError);\n      }\n\n      _subjects.state.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n        submitCount: _formState.submitCount + 1,\n        errors: _formState.errors,\n      });\n      if (onValidError) {\n        throw onValidError;\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, cloneObject(get(_defaultValues, name)));\n      } else {\n        setValue(\n          name,\n          options.defaultValue as PathValue<\n            TFieldValues,\n            FieldPath<TFieldValues>\n          >,\n        );\n        set(_defaultValues, name, cloneObject(options.defaultValue));\n      }\n\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue\n          ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n          : _getDirty();\n      }\n\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _updateValid();\n      }\n\n      _subjects.state.next({ ..._formState });\n    }\n  };\n\n  const _reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const isEmptyResetValues = isEmptyObject(formValues);\n    const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (keepStateOptions.keepDirtyValues) {\n        const fieldsToCheck = new Set([\n          ..._names.mount,\n          ...Object.keys(getDirtyFields(_defaultValues, _formValues)),\n        ]);\n        for (const fieldName of Array.from(fieldsToCheck)) {\n          get(_formState.dirtyFields, fieldName)\n            ? set(values, fieldName, get(_formValues, fieldName))\n            : setValue(\n                fieldName as FieldPath<TFieldValues>,\n                get(values, fieldName),\n              );\n        }\n      } else {\n        if (isWeb && isUndefined(formValues)) {\n          for (const name of _names.mount) {\n            const field = get(_fields, name);\n            if (field && field._f) {\n              const fieldReference = Array.isArray(field._f.refs)\n                ? field._f.refs[0]\n                : field._f.ref;\n\n              if (isHTMLElement(fieldReference)) {\n                const form = fieldReference.closest('form');\n                if (form) {\n                  form.reset();\n                  break;\n                }\n              }\n            }\n          }\n        }\n\n        _fields = {};\n      }\n\n      _formValues = _options.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneObject(values);\n\n      _subjects.array.next({\n        values: { ...values },\n      });\n\n      _subjects.values.next({\n        values: { ...values },\n      });\n    }\n\n    _names = {\n      mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      disabled: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _state.mount =\n      !_proxyFormState.isValid ||\n      !!keepStateOptions.keepIsValid ||\n      !!keepStateOptions.keepDirtyValues;\n\n    _state.watch = !!_options.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: isEmptyResetValues\n        ? false\n        : keepStateOptions.keepDirty\n          ? _formState.isDirty\n          : !!(\n              keepStateOptions.keepDefaultValues &&\n              !deepEqual(formValues, _defaultValues)\n            ),\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: isEmptyResetValues\n        ? {}\n        : keepStateOptions.keepDirtyValues\n          ? keepStateOptions.keepDefaultValues && _formValues\n            ? getDirtyFields(_defaultValues, _formValues)\n            : _formState.dirtyFields\n          : keepStateOptions.keepDefaultValues && formValues\n            ? getDirtyFields(_defaultValues, formValues)\n            : keepStateOptions.keepDirty\n              ? _formState.dirtyFields\n              : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n        ? _formState.isSubmitSuccessful\n        : false,\n      isSubmitting: false,\n    });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (formValues, keepStateOptions) =>\n    _reset(\n      isFunction(formValues)\n        ? (formValues as Function)(_formValues as TFieldValues)\n        : formValues,\n      keepStateOptions,\n    );\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n    const fieldReference = field && field._f;\n\n    if (fieldReference) {\n      const fieldRef = fieldReference.refs\n        ? fieldReference.refs[0]\n        : fieldReference.ref;\n\n      if (fieldRef.focus) {\n        fieldRef.focus();\n        options.shouldSelect &&\n          isFunction(fieldRef.select) &&\n          fieldRef.select();\n      }\n    }\n  };\n\n  const _updateFormState = (\n    updatedFormState: Partial<FormState<TFieldValues>>,\n  ) => {\n    _formState = {\n      ..._formState,\n      ...updatedFormState,\n    };\n  };\n\n  const _resetDefaultValues = () =>\n    isFunction(_options.defaultValues) &&\n    (_options.defaultValues as Function)().then((values: TFieldValues) => {\n      reset(values, _options.resetOptions);\n      _subjects.state.next({\n        isLoading: false,\n      });\n    });\n\n  return {\n    control: {\n      register,\n      unregister,\n      getFieldState,\n      handleSubmit,\n      setError,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _updateDisabledField,\n      _getFieldArray,\n      _reset,\n      _resetDefaultValues,\n      _updateFormState,\n      _disableForm,\n      _subjects,\n      _proxyFormState,\n      _setErrors,\n      get _fields() {\n        return _fields;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      get _state() {\n        return _state;\n      },\n      set _state(value) {\n        _state = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    getFieldState,\n  };\n}\n","import React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport deepEqual from './utils/deepEqual';\nimport isFunction from './utils/isFunction';\nimport {\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n  TTransformedValues extends FieldValues | undefined = undefined,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext, TTransformedValues> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext, TTransformedValues> | undefined\n  >(undefined);\n  const _values = React.useRef<typeof props.values>(undefined);\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    isLoading: isFunction(props.defaultValues),\n    isSubmitted: false,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    submitCount: 0,\n    dirtyFields: {},\n    touchedFields: {},\n    validatingFields: {},\n    errors: props.errors || {},\n    disabled: props.disabled || false,\n    defaultValues: isFunction(props.defaultValues)\n      ? undefined\n      : props.defaultValues,\n  });\n\n  if (!_formControl.current) {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n  control._options = props;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    next: (\n      value: Partial<FormState<TFieldValues>> & { name?: InternalFieldName },\n    ) => {\n      if (\n        shouldRenderFormState(\n          value,\n          control._proxyFormState,\n          control._updateFormState,\n          true,\n        )\n      ) {\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(\n    () => control._disableForm(props.disabled),\n    [control, props.disabled],\n  );\n\n  React.useEffect(() => {\n    if (control._proxyFormState.isDirty) {\n      const isDirty = control._getDirty();\n      if (isDirty !== formState.isDirty) {\n        control._subjects.state.next({\n          isDirty,\n        });\n      }\n    }\n  }, [control, formState.isDirty]);\n\n  React.useEffect(() => {\n    if (props.values && !deepEqual(props.values, _values.current)) {\n      control._reset(props.values, control._options.resetOptions);\n      _values.current = props.values;\n      updateFormState((state) => ({ ...state }));\n    } else {\n      control._resetDefaultValues();\n    }\n  }, [props.values, control]);\n\n  React.useEffect(() => {\n    if (props.errors) {\n      control._setErrors(props.errors);\n    }\n  }, [props.errors, control]);\n\n  React.useEffect(() => {\n    if (!control._state.mount) {\n      control._updateValid();\n      control._state.mount = true;\n    }\n\n    if (control._state.watch) {\n      control._state.watch = false;\n      control._subjects.state.next({ ...control._formState });\n    }\n\n    control._removeUnmounted();\n  });\n\n  React.useEffect(() => {\n    props.shouldUnregister &&\n      control._subjects.values.next({\n        values: control._getWatch(),\n      });\n  }, [props.shouldUnregister, control]);\n\n  _formControl.current.formState = getProxyFormState(formState, control);\n\n  return _formControl.current;\n}\n"],"names":["isCheckBoxInput","element","type","isDateObject","value","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","event","target","checked","isNameInFieldArray","names","name","has","substring","search","getNodeParentName","isPlainObject","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isWeb","window","HTMLElement","document","cloneObject","data","copy","isFileListInstance","FileList","Set","Blob","key","compact","filter","Boolean","isUndefined","val","undefined","get","object","path","defaultValue","result","split","reduce","isBoolean","isKey","test","stringToPath","input","replace","set","index","tempPath","length","lastIndex","newValue","objValue","isNaN","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","HookFormContext","React","useFormContext","getProxyFormState","formState","control","localProxyFormState","isRoot","arguments","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isEmptyObject","keys","shouldRenderFormState","formStateData","updateFormState","find","convertToArrayPayload","shouldSubscribeByName","signalName","exact","some","currentName","startsWith","useSubscribe","props","_props","current","subscription","disabled","subject","subscribe","next","unsubscribe","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","useWatch","methods","_name","_subjects","values","updateValue","_formValues","_getWatch","_removeUnmounted","appendErrors","validateAllFieldCriteria","errors","message","types","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isWatched","isBlurEvent","watchName","slice","iterateFieldsByAction","fields","action","fieldsNames","abortEarly","field","_f","currentField","refs","ref","updateFieldArrayRootError","error","fieldArrayErrors","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMessage","isRadioInput","isRegex","RegExp","defaultResult","isValid","validResult","getCheckboxValue","options","option","attributes","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","async","disabledFieldNames","shouldUseNativeValidation","isFieldArray","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","inputValue","inputRef","setCustomValidity","reportValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","unset","paths","childObject","updatePath","baseGet","obj","isEmptyArray","createSubject","_observers","observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isMultipleSelect","live","isConnected","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","_ref2","setValueAs","NaN","getFieldValue","files","selectedOptions","_ref3","getResolverOptions","_fields","criteriaMode","getRuleValue","rule","source","ASYNC_FUNCTION","hasPromiseValidation","fieldReference","validateFunction","hasValidation","schemaErrorLookup","join","foundError","pop","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","delayErrorCallback","_options","_formState","submitCount","isDirty","isLoading","isValidating","isSubmitting","isSubmitSuccessful","touchedFields","dirtyFields","validatingFields","shouldUnregister","_state","unMount","array","timer","state","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","_updateValid","shouldUpdateValid","resolver","_executeSchema","executeBuiltInValidation","_updateIsValidating","from","forEach","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","disabledField","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","fieldState","previousFieldError","callback","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","context","shouldOnlyCheckValid","valid","isFieldArrayRoot","isPromiseFunction","fieldError","getValues","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isFieldValueUpdated","_updateIsFieldValueUpdated","Number","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","_focusInput","focus","fieldNames","executeSchemaAndUpdateState","Promise","shouldFocus","getFieldState","invalid","setError","currentError","currentRef","restOfErrorTree","unregister","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValidating","keepDefaultValue","keepIsValid","_updateDisabledField","_ref4","register","disabledIsDefined","progressive","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","onValidError","e","preventDefault","persist","fieldValues","size","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","keepDefaultValues","keepValues","keepDirtyValues","fieldsToCheck","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","keepIsSubmitSuccessful","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","argA","argB","_getFieldArray","_resetDefaultValues","then","resetOptions","_updateFormState","_disableForm","_setErrors","payload","resetField","clearErrors","inputName","setFocus","shouldSelect","select","useForm","_formControl","_values"],"sourceRoot":""}